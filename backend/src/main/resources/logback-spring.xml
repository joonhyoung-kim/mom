<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include
		resource="org/springframework/boot/logging/logback/defaults.xml" />

	<appender name="console"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss}:%-3relative [%thread] %-5level %logger{36} -%msg%n
			</pattern>
		</encoder>
	</appender>

	<logger name="com.study.springboot" level="off"/>	
	<logger name="jdbc" level="off" /> 										<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.sqlonly" level="off" />          					<!--SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. (원래는 ? 로 표시되는데, log4j 덕분에 완전한 쿼리로 보여지는 것임) -->
	<logger name="jdbc.sqltiming" level="debug"/>                            <!--SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.  -->
	<logger name="jdbc.audit" level="off" additivity="false"/>             <!--ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.  -->
	<logger name="jdbc.resultset" level="off" additivity="false"/>         <!--ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.  -->
	<logger name="jdbc.resultsettable" level="off" additivity="false"/>     <!--SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.connection" level="off" additivity="false"/>        <!--열려있는 모든 번호와 연결 수립 및 해제 이벤트를 기록. 이는 연결 문제를 찾아내는데 매우 유용 (Connection Pool 설정) -->

	<root level="debug">
		<appender-ref ref="console" />
	</root>
</configuration>