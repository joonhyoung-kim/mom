<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUMD1080">
  <select id="get_findBtn1" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	 	SELECT MCD.COMPANY_CD											
	     , MCD.COMPANY_NM											
	     , MCD.DIVISION_CD											
	     , MCD.DIVISION_NM											
	     , MR.ROUTING_ID 											
	     , MR.ROUTING_SHORT_NM     											
	     , MR.ROUTING_NM 											
	     , MR.USE_YN											
	     , MR.DESCRIPTION											
	     , MR.CREATE_BY											
	     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MR.COMPANY_CD, MR.DIVISION_CD, MR.CREATE_BY) FROM DUAL ) AS CREATE_BY_NM											
	     , TO_CHAR(MR.CREATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE											
	     , MR.UPDATE_BY											
	     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MR.COMPANY_CD, MR.DIVISION_CD, MR.UPDATE_BY) FROM DUAL ) AS UPDATE_BY_NM											
	     , TO_CHAR(MR.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	 	 , ROWIDTOCHAR(MR.ROWID) AS GRID_ID
	FROM   MOM_COM_DIV_V MCD											
	     , MOM_ROUTING MR											
	WHERE  MCD.COMPANY_CD  = MR.COMPANY_CD											
	AND    MCD.DIVISION_CD = MR.DIVISION_CD   											
	AND    MCD.COMPANY_CD  = #{companyCd,  jdbcType=VARCHAR}											
	AND    MCD.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}      											
    <if test="routingId!= null and routingId != ''">
    AND (UPPER(MR.ROUTING_ID)  LIKE '%' || UPPER(#{routingId, jdbcType=VARCHAR}) || '%')
    </if>
    <if test="routingNm!= null and routingNm != ''">
    AND (UPPER(MR.ROUTING_NM) LIKE '%' || UPPER(#{routingNm, jdbcType=VARCHAR}) || '%')
    </if>								
    <if test="useYn != null and useYn != ''">
    AND MR.USE_YN = #{useYn, jdbcType=VARCHAR}
    </if>										
    ORDER BY  MCD.COMPANY_NM, MCD.DIVISION_NM, MR.ROUTING_NM   													
  </select>


  <update id="modify_customBtn1-2" parameterType="java.util.List">
    <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
      	UPDATE MOM_ROUTING						
	    SET    ROUTING_SHORT_NM  = #{item.routingShortNm, jdbcType=VARCHAR}						
		     , ROUTING_NM        = #{item.routingNm, jdbcType=VARCHAR}						
		     , USE_YN            = #{item.useYn, jdbcType=VARCHAR}						
		     , DESCRIPTION       = #{item.description, jdbcType=VARCHAR}						
		     , UPDATE_BY         = #{item.userId, jdbcType=VARCHAR}						
		     , UPDATE_DATE       = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})						
		WHERE  COMPANY_CD        = #{item.companyCd, jdbcType=VARCHAR}						
		AND    DIVISION_CD       = #{item.divisionCd, jdbcType=VARCHAR}						
		AND    ROUTING_ID        = #{item.routingId, jdbcType=VARCHAR}						      
    </foreach>
  </update> 
  <select id="get_findBtn2" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">  
     	SELECT MCD.COMPANY_CD									
	     , MCD.COMPANY_NM									
	     , MCD.DIVISION_CD									
	     , MCD.DIVISION_NM									
	     , MRP.ROUTING_ID 									
	     , MR.ROUTING_SHORT_NM									
	     , MR.ROUTING_NM 									
	     , MRP.OPERATION_SEQ 									
	     , MRP.OPERATION_ID 									
	     , MRP.ROUTING_ID || '_'|| MRP.OPERATION_ID AS KEY_ID									
	     , MO.OPERATION_NM									
	     , MRP.FINAL_OPERATION_YN  									
	     , MO.INSPECTION_YN									
	     , MRP.MILESTONE     									
	     , MRP.USE_YN									
	     , MRP.DESCRIPTION									
	     , MRP.CREATE_BY									
	     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MRP.COMPANY_CD, MRP.DIVISION_CD, MRP.CREATE_BY) FROM DUAL ) AS CREATE_BY_NM									
	     , TO_CHAR(MRP.CREATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE									
	     , MRP.UPDATE_BY									
	     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MRP.COMPANY_CD, MRP.DIVISION_CD, MRP.UPDATE_BY) FROM DUAL ) AS UPDATE_BY_NM									
	     , TO_CHAR(MRP.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE									
	FROM   MOM_COM_DIV_V MCD									
	     , MOM_ROUTING_PATH MRP									
	     , MOM_ROUTING MR									
	     , MOM_OPERATION MO									
	WHERE  MCD.COMPANY_CD    = MRP.COMPANY_CD									
	AND    MCD.DIVISION_CD   = MRP.DIVISION_CD   									
	AND    MRP.COMPANY_CD    = MR.COMPANY_CD									
	AND    MRP.DIVISION_CD   = MR.DIVISION_CD									
	AND    MRP.ROUTING_ID    = MR.ROUTING_ID									
	AND    MRP.COMPANY_CD    = MO.COMPANY_CD									
	AND    MRP.DIVISION_CD   = MO.DIVISION_CD									
	AND    MRP.OPERATION_ID  = MO.OPERATION_ID   									
	AND    MCD.COMPANY_CD    = #{companyCd,  jdbcType=VARCHAR}									
	AND    MCD.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}      									
	AND    MRP.ROUTING_ID    =  #{routingId, jdbcType=VARCHAR} 						
	ORDER BY  MCD.COMPANY_NM, MCD.DIVISION_NM, MR.ROUTING_NM, MRP.OPERATION_SEQ     									
  </select> 
  <delete id="remove_customBtn2-1" parameterType="java.util.List">
       DELETE FROM MOM_PROC_ROUTING_PATH_UP
      <where>
       <foreach collection="list" item="item" open="" close="" separator="OR">
        (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
        )
       </foreach>
      </where>
   </delete>  
   <insert id="create_customBtn2-1" parameterType="java.util.List">
    <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
     INTO MOM_PROC_ROUTING_PATH_UP (
                  COMPANY_CD
                , DIVISION_CD
                , ROUTING_ID
                , OPERATION_ID
                , FINAL_OPERATION_YN
                , MILESTONE
                , USE_YN
                , DESCRIPTION
                , VAL_MSG
                , MULTI_MSG
                , CREATE_BY
                , CREATE_DATE )
      VALUES 
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.routingId, jdbcType=VARCHAR}
                , #{item.operationId, jdbcType=VARCHAR}
                , #{item.finalOperationYn, jdbcType=VARCHAR}
                , #{item.milestone, jdbcType=VARCHAR}
                , #{item.useYn, jdbcType=VARCHAR}
                , #{item.description, jdbcType=VARCHAR}
                , #{item.valMsg, jdbcType=VARCHAR}
                , #{item.multiMsg, jdbcType=VARCHAR}
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
   </foreach>
  </insert>
    <select id="proc_customBtn2-1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
          { CALL MOM_MASTER_INFO_PKG.sp_update_routing_path(    #{p_err_code,  jdbcType=VARCHAR, mode=OUT}
					                                          , #{p_err_msg,   jdbcType=VARCHAR, mode=OUT}
					                                          , #{companyCd,   javaType=string,  jdbcType=VARCHAR , mode=IN}
					                                          , #{divisionCd,  jdbcType=VARCHAR, mode=IN}												  
					                                          , #{userId,      jdbcType=VARCHAR, mode=IN} )}               
    </select>    

     <insert id="upsert_excelUpBtn1" parameterType="java.util.HashMap" flushCache="true">
      MERGE INTO MOM_ROUTING 
            USING( 
                     SELECT #{companyCd, jdbcType=VARCHAR} as companyCd,
                            #{divisionCd, jdbcType=VARCHAR} as divisionCd,
                            #{routingId, jdbcType=VARCHAR} as routingId,
                            #{routingNm, jdbcType=VARCHAR} as routingNm,
                            #{useYn, jdbcType=VARCHAR} as useYn,
                            #{description, jdbcType=VARCHAR} as description,
                            #{userId, jdbcType=VARCHAR} as createBy,
                            MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as createDate,
                            #{userId, jdbcType=VARCHAR} as updateBy,
                            MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as updateDate
                     FROM DUAL
               ) PARAM
            ON ( COMPANY_CD = PARAM.companyCd AND
                 DIVISION_CD = PARAM.divisionCd AND
                 ROUTING_ID = PARAM.routingId )
            WHEN MATCHED THEN 
                 UPDATE SET ROUTING_NM = PARAM.routingNm
                          , USE_YN = PARAM.useYn
                          , DESCRIPTION = PARAM.description
                          , CREATE_BY = PARAM.createBy
                          , CREATE_DATE = PARAM.createDate
                          , UPDATE_BY = PARAM.updateBy
                          , UPDATE_DATE = PARAM.updateDate
            WHEN NOT MATCHED THEN
                     INSERT ( COMPANY_CD
                            , DIVISION_CD
                            , ROUTING_ID
                            , ROUTING_NM
                            , USE_YN
                            , DESCRIPTION
                            , CREATE_BY
                            , CREATE_DATE
                            , UPDATE_BY
                            , UPDATE_DATE )
                     VALUES ( PARAM.companyCd
                            , PARAM.divisionCd
                            , PARAM.routingId
                            , PARAM.routingNm
                            , PARAM.useYn
                            , PARAM.description
                            , PARAM.createBy
                            , PARAM.createDate
                            , PARAM.updateBy
                            , PARAM.updateDate )
  </insert>
   <insert id="upsert_excelUpBtn2" parameterType="java.util.HashMap" flushCache="true">
      MERGE INTO MOM_ROUTING_PATH 
            USING(
                     SELECT #{companyCd, jdbcType=VARCHAR} as companyCd,
                            #{divisionCd, jdbcType=VARCHAR} as divisionCd,
                            #{routingId, jdbcType=VARCHAR} as routingId,
                            #{operationId, jdbcType=VARCHAR} as operationId,
                            #{operationSeq, jdbcType=NUMERIC} as operationSeq,
                            #{finalOperationYn, jdbcType=VARCHAR} as finalOperationYn,
                            #{useYn, jdbcType=VARCHAR} as useYn,
                            #{description, jdbcType=VARCHAR} as description,
                            #{userId, jdbcType=VARCHAR} as createBy,
                            MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as createDate,
                            #{userId, jdbcType=VARCHAR} as updateBy,
                            MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as updateDate
                     FROM DUAL
                 ) PARAM
            ON ( COMPANY_CD = PARAM.companyCd AND
                 DIVISION_CD = PARAM.divisionCd AND
                 ROUTING_ID = PARAM.routingId AND
                 OPERATION_ID = PARAM.operationId )
            WHEN MATCHED THEN 
                 UPDATE SET OPERATION_SEQ = PARAM.operationSeq
                          , FINAL_OPERATION_YN = PARAM.finalOperationYn
                          , USE_YN = PARAM.useYn
                          , DESCRIPTION = PARAM.description
                          , CREATE_BY = PARAM.createBy
                          , CREATE_DATE = PARAM.createDate
                          , UPDATE_BY = PARAM.updateBy
                          , UPDATE_DATE = PARAM.updateDate
            WHEN NOT MATCHED THEN
                     INSERT ( COMPANY_CD
                            , DIVISION_CD
                            , ROUTING_ID
                            , OPERATION_ID
                            , OPERATION_SEQ
                            , FINAL_OPERATION_YN
                            , USE_YN
                            , DESCRIPTION
                            , CREATE_BY
                            , CREATE_DATE
                            , UPDATE_BY
                            , UPDATE_DATE )
                     VALUES ( PARAM.companyCd
                            , PARAM.divisionCd
                            , PARAM.routingId
                            , PARAM.operationId
                            , PARAM.operationSeq
                            , PARAM.finalOperationYn
                            , PARAM.useYn
                            , PARAM.description
                            , PARAM.createBy
                            , PARAM.createDate
                            , PARAM.updateBy
                            , PARAM.updateDate )
  </insert>  
  </mapper>