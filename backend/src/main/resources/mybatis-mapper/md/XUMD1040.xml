<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUMD1040">
    <select id="get_findBtn1" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
        SELECT A.*
	    FROM   (
	    </if>
			    SELECT MCD.COMPANY_CD
				     , MCD.COMPANY_NM
				     , MCD.DIVISION_CD
				     , MCD.DIVISION_NM
				     , MWG.WORK_GROUP_CD
				     , MWG.WORK_GROUP_NM
				     , MWG.USE_YN
				     , MWG.DESCRIPTION
				     , MWG.CREATE_BY
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWG.COMPANY_CD, MWG.DIVISION_CD, MWG.CREATE_BY) FROM DUAL ) AS CREATE_BY_NM
				     , TO_CHAR(MWG.CREATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
				     , MWG.UPDATE_BY
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWG.COMPANY_CD, MWG.DIVISION_CD, MWG.UPDATE_BY) FROM DUAL ) AS UPDATE_BY_NM
				     , TO_CHAR(MWG.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		             , ROWIDTOCHAR(MWG.ROWID) AS GRID_ID
		             , MWG.WORK_GROUP_CD      AS KEY_ID
		             , COUNT(*) OVER()        AS TOTAL_COUNT
	                 , ROW_NUMBER() OVER(PARTITION BY MWG.COMPANY_CD,MWG.DIVISION_CD ORDER BY MWG.WORK_GROUP_NM) AS ROW_COUNT	
				FROM   MOM_COM_DIV_V MCD
				     , MOM_WORK_GROUP MWG
				WHERE  MCD.COMPANY_CD  = MWG.COMPANY_CD
				AND    MCD.DIVISION_CD = MWG.DIVISION_CD   
				AND    MCD.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
				AND    MCD.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}  		
				<if test="workGroupCd != null and workGroupCd != ''">
				AND    (MWG.WORK_GROUP_CD LIKE '%' || TRIM(UPPER(#{workGroupCd, jdbcType=VARCHAR})) || '%' )
				</if>
				<if test="workGroupNm != null and workGroupNm != ''">
			    AND    (MWG.WORK_GROUP_NM LIKE '%' || TRIM(UPPER(#{workGroupNm, jdbcType=VARCHAR})) || '%' )
				</if>
			    <if test="useYn != null and useYn != ''">
			    AND    MWG.USE_YN = #{useYn, jdbcType=VARCHAR}
				</if>
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
	       ) A
	    WHERE ROW_COUNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
	    </if>    
    </select>
    <insert id="create_createBtn1" parameterType="java.util.List">
        INSERT INTO MOM_WORK_GROUP( COMPANY_CD
	                              ,  DIVISION_CD
	                              ,  WORK_GROUP_CD
	                              ,  WORK_GROUP_NM
	                              ,  USE_YN
	                              ,  DESCRIPTION
	                              ,  CREATE_BY
	                              ,  CREATE_DATE
	                              ,  UPDATE_BY
	                              ,  UPDATE_DATE )
        VALUES 
            <foreach item="item" collection="list" index="i" separator=" " open="">
            (   #{item.companyCd, jdbcType=VARCHAR}
            ,   #{item.divisionCd, jdbcType=VARCHAR}
            ,   #{item.workGroupCd, jdbcType=VARCHAR}
            ,   #{item.workGroupNm, jdbcType=VARCHAR}
            ,   #{item.useYn, jdbcType=VARCHAR}
            ,   #{item.description, jdbcType=VARCHAR}
            ,   #{item.userId, jdbcType=VARCHAR}
            ,   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
            ,   #{item.userId, jdbcType=VARCHAR}
            ,   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
            )
            </foreach>
    </insert>
    <update id="modify_editBtn1" parameterType="java.util.List">
        <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
        UPDATE MOM_WORK_GROUP
        SET    WORK_GROUP_NM = #{item.workGroupNm,   jdbcType=VARCHAR}
             , USE_YN        = #{item.useYn,         jdbcType=VARCHAR}
             , DESCRIPTION   = #{item.description,   jdbcType=VARCHAR}
             , UPDATE_BY     = #{item.userId,        jdbcType=VARCHAR}
             , UPDATE_DATE   = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
        WHERE  COMPANY_CD    = TRIM(#{item.companyCd,   jdbcType=VARCHAR})
        AND    DIVISION_CD   = TRIM(#{item.divisionCd,  jdbcType=VARCHAR}) 
        AND    WORK_GROUP_CD = TRIM(#{item.workGroupCd, jdbcType=VARCHAR})           
        </foreach>
    </update>
    <delete id="remove_delBtn1" parameterType="java.util.List"> 
	    DELETE
	    FROM    MOM_WORK_GROUP
            <where> 
            <foreach collection="list" item="item" open="" close="" separator="OR"> 
            (   
	               COMPANY_CD     = TRIM(#{item.companyCd,   jdbcType=VARCHAR})
	         AND   DIVISION_CD    = TRIM(#{item.divisionCd,  jdbcType=VARCHAR}) 
	         AND   WORK_GROUP_CD  = TRIM(#{item.workGroupCd, jdbcType=VARCHAR}) 
            )
            </foreach>
            </where>
    </delete>
    <insert id="upsert_excelUpBtn1" parameterType="java.util.HashMap" flushCache="true">
    MERGE 
    INTO  MOM_WORK_GROUP 
    USING ( SELECT #{companyCd, jdbcType=VARCHAR} as companyCd,
                   #{divisionCd, jdbcType=VARCHAR} as divisionCd,
                   #{workGroupCd, jdbcType=VARCHAR} as workGroupCd,
                   #{workGroupNm, jdbcType=VARCHAR} as workGroupNm,
                   #{useYn, jdbcType=VARCHAR} as useYn,
                   #{description, jdbcType=VARCHAR} as description,
                   #{userId, jdbcType=VARCHAR} as createBy,
                   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as createDate,
                   #{userId, jdbcType=VARCHAR} as updateBy,
                   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as updateDate
            FROM DUAL ) PARAM
    ON    ( COMPANY_CD = PARAM.companyCd AND
            DIVISION_CD = PARAM.divisionCd AND
            WORK_GROUP_CD = PARAM.workGroupCd )
    WHEN MATCHED THEN 
        UPDATE 
        SET    WORK_GROUP_NM = PARAM.workGroupNm
             , USE_YN = PARAM.useYn
             , DESCRIPTION = PARAM.description
             , CREATE_BY = PARAM.createBy
             , CREATE_DATE = PARAM.createDate
             , UPDATE_BY = PARAM.updateBy
             , UPDATE_DATE = PARAM.updateDate
    WHEN NOT MATCHED THEN
        INSERT ( COMPANY_CD
               , DIVISION_CD
               , WORK_GROUP_CD
               , WORK_GROUP_NM
               , USE_YN
               , DESCRIPTION
               , CREATE_BY
               , CREATE_DATE
               , UPDATE_BY
               , UPDATE_DATE )
        VALUES ( PARAM.companyCd
               , PARAM.divisionCd
               , PARAM.workGroupCd
               , PARAM.workGroupNm
               , PARAM.useYn
               , PARAM.description
               , PARAM.createBy
               , PARAM.createDate
               , PARAM.updateBy
               , PARAM.updateDate )
    </insert>   
</mapper>
