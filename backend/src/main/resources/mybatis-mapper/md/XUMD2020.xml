<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.XUMD2020">
   <select id="get_defaultInfo1" parameterType="java.util.HashMap"  resultType="com.mom.dto.LowerHashMap" fetchSize="1000">
	 SELECT LPAD(LEVEL, DECODE(LEVEL,1,1,(LEVEL*2)-1),'.') AS BOM_LEVEL
	     , LEVEL   
	     , MB.PARENT_ITEM_ID
	     , MB.PARENT_ITEM_ID AS PARENT_ITEM_ID2
	     , MB.CHILD_ITEM_ID     
	     , MB.PARENT_ITEM_ID || '_' || MB.CHILD_ITEM_ID  AS KEY_ID
	     , MB.REQ_QTY 
	     , MB.PHANTOM_FLAG  
	     , MB.MRP_FLAG
	     , MB.ISSUE_TYPE
	     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0006', MI.ISSUE_TYPE, 'KR') FROM DUAL) AS ISSUE_TYPE_NM  
	     , TO_CHAR(MB.START_DATE,'YYYY-MM-DD') AS START_DATE
	     , TO_CHAR(MB.END_DATE,'YYYY-MM-DD') AS END_DATE          
	     , MB.SORT_NO  
	     , MB.UPDATE_BY  
	     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MB.COMPANY_CD, MB.DIVISION_CD, MB.UPDATE_BY) FROM DUAL ) AS UPDATEBYNM
	     , TO_CHAR(MB.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	     , MI.ITEM_NM AS CHILD_ITEM_NM    
	     , MI.ITEM_SPEC
	     , MI.ITEM_TYPE
	     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, 'KR') FROM DUAL) AS ITEM_TYPE_NM     
	     , MI.UNIT
	     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.UNIT, 'KR') FROM DUAL) AS UNIT_NM 
	     , MI.IN_LOCATION_CD
	     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MI.COMPANY_CD,MI.DIVISION_CD,MI.IN_LOCATION_CD) FROM DUAL) AS IN_LOCATION_NM
	     , MCD.COMPANY_CD
	     , MCD.COMPANY_NM
	     , MCD.DIVISION_CD
	     , MCD.DIVISION_NM
	     , CONNECT_BY_ROOT(MB.CHILD_ITEM_ID)             AS BOM_ROOT
	     , SYS_CONNECT_BY_PATH(MB.CHILD_ITEM_ID, ' -> ') AS BOM_PATH
	     , CONNECT_BY_ISLEAF                             AS BOM_LEAF
	FROM   MOM_COM_DIV_V MCD
	     , MOM_BOM MB
	     , MOM_ITEM MI
	WHERE  MCD.COMPANY_CD   = MB.COMPANY_CD
	AND    MCD.DIVISION_CD  = MB.DIVISION_CD
	AND    MB.COMPANY_CD    = MI.COMPANY_CD
	AND    MB.DIVISION_CD   = MI.DIVISION_CD
	AND    MB.CHILD_ITEM_ID = MI.ITEM_ID 
    AND    MB.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
    AND    MB.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}  	
	AND    MB.USE_YN      = #{useYn, jdbcType=VARCHAR}      
	AND    TO_DATE(#{basicDate, jdbcType=VARCHAR} , 'YYYY-MM-DD') BETWEEN MB.START_DATE AND MB.END_DATE
	<choose>
 	  <when test='deploymentType.equals("E")'>
  	  	START WITH MB.PARENT_ITEM_ID = #{childItemId, jdbcType=VARCHAR}   
	    CONNECT BY PRIOR MB.CHILD_ITEM_ID = MB.PARENT_ITEM_ID  
  	  </when>  
 	  <when test='deploymentType.equals("I")'>
  	  	START WITH MB.CHILD_ITEM_ID  = #{childItemId, jdbcType=VARCHAR}  
	    CONNECT BY PRIOR MB.PARENT_ITEM_ID = MB.CHILD_ITEM_ID    
  	  </when>    
  	  <otherwise>
  	    START WITH MB.PARENT_ITEM_ID = #{childItemId, jdbcType=VARCHAR}   
	    CONNECT BY PRIOR MB.CHILD_ITEM_ID = MB.PARENT_ITEM_ID  
  	  </otherwise>
    </choose>						
	</select>
    <insert id="create_defaultInfo1" parameterType="java.util.List">  
        INSERT INTO MOM_BOM(
					              COMPANY_CD
								, DIVISION_CD
								, PARENT_ITEM_ID
								, CHILD_ITEM_ID
								, REQ_QTY
								, START_DATE
								, END_DATE
								, PHANTOM_FLAG
								, MRP_FLAG
								, ISSUE_TYPE
								, SORT_NO
								, USE_YN
								, DESCRIPTION
								, CREATE_BY
								, CREATE_DATE
								, UPDATE_BY
								, UPDATE_DATE
					         )     
        VALUES
                <foreach item="item" collection="list" index="i" separator=" " open="">
				          (    #{item.companyCd,          jdbcType=VARCHAR}
				             , #{item.divisionCd,         jdbcType=VARCHAR}
				             , #{item.parentItemId,       jdbcType=VARCHAR}
				             , #{item.childItemId,        jdbcType=VARCHAR}
				             , #{item.reqQty,             jdbcType=NUMERIC}
				             , #{item.startDate,          jdbcType=VARCHAR}
				             , #{item.endDate,            jdbcType=VARCHAR}
				             , #{item.phantomFlag,        jdbcType=VARCHAR}
				             , #{item.mrpFlag,            jdbcType=VARCHAR}
				             , #{item.issueType,          jdbcType=VARCHAR}
				             , #{item.sortNo,             jdbcType=NUMERIC}
				             , #{item.useYn,              jdbcType=VARCHAR}
				             , #{item.description,        jdbcType=VARCHAR}    
				             , TRIM(#{item.userId,        jdbcType=VARCHAR})
				             , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
				             , TRIM(#{item.userId,   jdbcType=VARCHAR})
				             , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})  
				          )		             
	            </foreach>			               
   </insert>   
   <update id="modify_defaultInfo1" parameterType="java.util.List">     
      <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
        UPDATE MOM_BOM
        SET         REQ_QTY              = #{item.reqQty,             jdbcType=VARCHAR}
				  , START_DATE           = #{item.startDate,          jdbcType=VARCHAR}
				  , END_DATE             = #{item.endDate,            jdbcType=VARCHAR}
				  , SORT_NO              = #{item.sortNo,             jdbcType=VARCHAR}
				  , MRP_FLAG             = #{item.flag,               jdbcType=VARCHAR}
				  , ISSUE_TYPE           = #{item.issueType,          jdbcType=VARCHAR}
	              , PHANTOM_FLAG         = #{item.phantomFlag,        jdbcType=VARCHAR}	         
	              , USE_YN               = #{item.useYn,   		      jdbcType=VARCHAR}  
	              , DESCRIPTION          = #{item.description,        jdbcType=VARCHAR}    
		          , UPDATE_BY            = #{item.userId,             jdbcType=VARCHAR}
		          , UPDATE_DATE          = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR}, #{item.divisionCd, jdbcType=VARCHAR})
         <where>
               COMPANY_CD        = TRIM(#{item.companyCd,     jdbcType=VARCHAR})
         AND   DIVISION_CD       = TRIM(#{item.divisionCd,    jdbcType=VARCHAR}) 
         AND   PARENT_ITEM_ID    = TRIM(#{item.parentItemId,  jdbcType=VARCHAR})
         AND   CHILD_ITEM_ID     = TRIM(#{item.childItemId,   jdbcType=VARCHAR}) 
         </where>
      </foreach>
   </update> 
   <delete id="remove_defaultInfo1" parameterType="java.util.List"> 
	   DELETE
	   FROM    MOM_BOM
       <where> 
        <foreach collection="list" item="item" open="" close="" separator="OR"> 
          (   
	            COMPANY_CD        = TRIM(#{item.companyCd,     jdbcType=VARCHAR})
          AND   DIVISION_CD       = TRIM(#{item.divisionCd,    jdbcType=VARCHAR}) 
          AND   PARENT_ITEM_ID    = TRIM(#{item.parentItemId,  jdbcType=VARCHAR})
          AND   CHILD_ITEM_ID     = TRIM(#{item.childItemId,   jdbcType=VARCHAR}) 
          )
        </foreach>
       </where>
   </delete>
   <insert id="upsert_defaultInfo1" parameterType="java.util.List" >
	    MERGE INTO MOM_PROGRAM MP
	    USING (
	        <foreach collection="list" item="item" open="" close="" index="i" separator="UNION">
	             SELECT           TRIM(#{item.companyCd, jdbcType=VARCHAR})                              									   as companyCd,                                              					  
	                              TRIM(#{item.divisionCd, jdbcType=VARCHAR}) 																   as divisionCd,                                 						       
	                              TRIM(#{item.programId, jdbcType=VARCHAR})                                                                    as programId,
					              #{item.programNm, jdbcType=VARCHAR}           															   as programNm,
					              TRIM(#{item.programType, jdbcType=VARCHAR})    															   as programType,
					              TRIM(#{item.templateId, jdbcType=INTEGER})     															   as templateId,
					              TRIM(#{item.logYn, jdbcType=VARCHAR})          															   as logYn,
					              TRIM(#{item.useYn, jdbcType=VARCHAR})         															   as useYn,
					              TRIM(#{item.description, jdbcType=VARCHAR})    															   as description,
					              TRIM(#{item.userId, jdbcType=VARCHAR})         															   as createBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.divisionCd, jdbcType=VARCHAR}, #{item.companyCd, jdbcType=VARCHAR})  as createDate,
					              TRIM(#{item.userId, jdbcType=VARCHAR})         															   as updateBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.divisionCd, jdbcType=VARCHAR}, #{item.companyCd, jdbcType=VARCHAR})  as updateDate
	             FROM DUAL
	        </foreach>
	    ) PARAM 
	    ON (  PROGRAM_ID    = PARAM.programId  )
	    WHEN MATCHED THEN
	    UPDATE
	    SET		  PROGRAM_NM     = PARAM.programNm
                , PROGRAM_TYPE   = PARAM.programType
                , TEMPLATE_ID    = PARAM.templateId
                , LOG_YN         = PARAM.logYn
		        , USE_YN 		 = PARAM.useYn
 		        , DESCRIPTION    = PARAM.description
		        , UPDATE_BY      = PARAM.updateBy
		        , UPDATE_DATE    = PARAM.updateDate
			    	       
	    WHEN NOT MATCHED THEN
		INSERT ( 
			      PROGRAM_ID
		        , PROGRAM_NM
		        , PROGRAM_TYPE
		        , TEMPLATE_ID
		        , LOG_YN
		        , USE_YN
		        , DESCRIPTION
		        , CREATE_BY
		        , CREATE_DATE
		        , UPDATE_BY
		        , UPDATE_DATE
	    )   
	    VALUES (
                 PARAM.programId
			   , PARAM.programNm
			   , PARAM.programType
	           , PARAM.templateId
	           , PARAM.logYn
	           , PARAM.useYn
	           , PARAM.description
			   , PARAM.createBy
			   , PARAM.createDate
			   , PARAM.updateBy
			   , PARAM.updateDate
	    )	 
	</insert>
</mapper>
