<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.XUMD2010">
   <select id="get_defaultInfo1" parameterType="java.util.HashMap"  resultType="com.mom.dto.LowerHashMap" fetchSize="1000">
     SELECT MCD.COMPANY_CD
	      , MCD.COMPANY_NM
	      , MCD.DIVISION_CD
	      , MCD.DIVISION_NM
	      , MI.ITEM_ID
	      , MI.ITEM_NM
	      , MI.ITEM_GROUP_CD
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0001', MI.ITEM_GROUP_CD, 'KR') FROM DUAL) AS ITEM_GROUP_NM
	      , MI.ITEM_TYPE
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, 'KR') FROM DUAL) AS ITEM_TYPE_NM     
	      , MI.ITEM_SPEC
	      , MI.UNIT
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.UNIT, 'KR') FROM DUAL) AS UNIT_NM          
	      , MI.PROCUREMENT_TYPE
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0004', MI.PROCUREMENT_TYPE, 'KR') FROM DUAL) AS PROCUREMENT_TYPE_NM   
	      , MI.MATERIAL_TYPE
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0005', MI.MATERIAL_TYPE, 'KR') FROM DUAL) AS MATERIAL_TYPE_NM   
	      , MI.NET_WEIGHT
	      , MI.NET_WEIGHT_UNIT
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.NET_WEIGHT_UNIT, 'KR') FROM DUAL) AS NET_WEIGHT_UNIT_NM  
	      , MI.GROSS_WEIGHT
	      , MI.GROSS_WEIGHT_UNIT
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.GROSS_WEIGHT_UNIT, 'KR') FROM DUAL) AS GROSS_WEIGHT_UNIT_NM  
	      , MI.IN_LOCATION_CD
	      , MI.OUT_LOCATION_CD
	      , MI.ISSUE_TYPE
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0006', MI.ISSUE_TYPE, 'KR') FROM DUAL) AS ISSUE_TYPE_NM  
	      , MI.ISSUE_UNIT
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.ISSUE_UNIT, 'KR') FROM DUAL) AS ISSUE_UNIT_NM  
	      , MI.VENDOR_CD
	      , MI.DEPARTURE_VENDOR_CD
	      , MI.TEST_REPORT_FLAG
	      , MI.IQC_FLAG
	      , MI.PQC_FLAG
	      , MI.FQC_FLAG
	      , MI.OQC_FLAG
	      , MI.RP_ITEM_ID
	      , MI.ITEM_CATEGORY_L
	      , MI.ITEM_CATEGORY_M
	      , MI.ITEM_CATEGORY_S
	      , MI.EXCEPTION_ISSUE_FLAG
	      , MI.COLOR
	      , MI.CUSTOMER_DIVISION_CD
	      , MI.MAKER
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0007', MI.MAKER, 'KR') FROM DUAL) AS MAKER_NM  
	      , MI.ABC_TYPE
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0008', MI.ABC_TYPE, 'KR') FROM DUAL) AS ABC_TYPE_NM  
	      , MI.DRAWING_NO
	      , MI.HS_CD
	      , MI.REORDER_POINT
	      , MI.SAFETY_STOCK_QTY
	      , MI.PHANTOM_FLAG
	      , MI.MRP_FLAG
	      , MI.USE_YN
	      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'SM0001', MI.USE_YN, 'KR') FROM DUAL) AS USE_YN_NM  
	      , MI.DESCRIPTION
	      , MI.CREATE_BY
	      , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.CREATE_BY) FROM DUAL ) AS CREATEBYNM
	      , TO_CHAR(MI.CREATE_DATE,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
	      , MI.UPDATE_BY  
	      , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.UPDATE_BY) FROM DUAL ) AS UPDATEBYNM
	      , TO_CHAR(MI.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
     FROM   MOM_COM_DIV_V MCD
          , MOM_ITEM MI
	 WHERE  MCD.COMPANY_CD  = MI.COMPANY_CD
	 AND    MCD.DIVISION_CD = MI.DIVISION_CD    
	 AND    MCD.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
     AND    MCD.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}  			
	 <if test="itemId != null and itemId != ''">
	 AND (MI.ITEM_ID LIKE '%' || TRIM(#{itemId, jdbcType=VARCHAR}) || '%' )
	 </if>
	 <if test="itemNm != null and itemNm != ''">
     AND (MI.ITEM_NM LIKE '%' || TRIM(#{itemNm , jdbcType=VARCHAR}) || '%' )
	 </if>
	 <if test="itemType != null and itemType != ''">
     AND MI.ITEM_TYPE IN (${itemType})
	 </if>
	 <if test="itemSpec != null and itemSpec != ''">
     AND (MI.ITEM_SPEC LIKE '%' || TRIM(UPPER(#{itemSpec , jdbcType=VARCHAR})) || '%' )
	 </if>
     <if test="useYn != null and useYn != ''">
     AND MI.USE_YN = #{useYn, jdbcType=VARCHAR}
	 </if>
	ORDER BY MCD.COMPANY_NM,  MCD.DIVISION_NM, MI.ITEM_ID						
	</select>
    <insert id="create_defaultInfo1" parameterType="java.util.List">  
        INSERT INTO MOM_ITEM(
					              COMPANY_CD
								, DIVISION_CD
								, ITEM_ID
								, ITEM_NM
								, ITEM_GROUP_CD
								, ITEM_TYPE
								, ITEM_SPEC
								, UNIT
								, PROCUREMENT_TYPE
								, MATERIAL_TYPE
								, NET_WEIGHT
								, NET_WEIGHT_UNIT
								, GROSS_WEIGHT
								, GROSS_WEIGHT_UNIT
								, IN_LOCATION_CD
								, OUT_LOCATION_CD
								, ISSUE_TYPE
								, ISSUE_UNIT
								, VENDOR_CD
								, DEPARTURE_VENDOR_CD
								, TEST_REPORT_FLAG
								, IQC_FLAG
								, PQC_FLAG
								, FQC_FLAG
								, OQC_FLAG
								, RP_ITEM_ID
								, ITEM_CATEGOROY_L
								, ITEM_CATEGOROY_M
								, ITEM_CATEGOROY_S
								, EXCEPTION_ISSUE_FLAG
								, COLOR
								, CUSTOMER_DIVISION_CD
								, MAKER
								, ABC_TYPE
								, DRAWING_NO
								, HS_CD
								, REORDER_POINT
								, SAFETY_STOCK_QTY
								, PHANTOM_FLAG
								, MRP_FLAG
								, USE_YN
								, DESCRIPTION
								, CREATE_BY
								, CREATE_DATE
								, UPDATE_BY
								, UPDATE_DATE
					         )     
        VALUES
                <foreach item="item" collection="list" index="i" separator=" " open="">
				          (    #{item.companyCd,          jdbcType=VARCHAR}
				             , #{item.divisionCd,         jdbcType=VARCHAR}
				             , #{item.itemId,             jdbcType=VARCHAR}
				             , #{item.itemNm,             jdbcType=VARCHAR}
				             , #{item.itemGroupCd,        jdbcType=VARCHAR}
				             , #{item.itemType,           jdbcType=VARCHAR}
				             , #{item.itemSpec,           jdbcType=VARCHAR}
				             , #{item.unit,               jdbcType=VARCHAR}
				             , #{item.procurementType,    jdbcType=VARCHAR}
				             , #{item.materialType,       jdbcType=VARCHAR}
				             , #{item.netWeight,          jdbcType=NUMERIC}
				             , #{item.netWeightUnit,      jdbcType=VARCHAR}
				             , #{item.grossWeight,        jdbcType=NUMERIC}
				             , #{item.grossWeightUnit,    jdbcType=VARCHAR}
				             , #{item.inLocationCd,       jdbcType=INTEGER}
				             , #{item.outLocationCd,      jdbcType=VARCHAR}
				             , #{item.issueType,          jdbcType=VARCHAR}
				             , #{item.issueUnit,          jdbcType=VARCHAR}
				             , #{item.vendorCd,           jdbcType=VARCHAR}
				             , #{item.departureVendorCd,  jdbcType=VARCHAR}
				             , #{item.testReportFlag,     jdbcType=VARCHAR}
				             , #{item.iqcFlag,  		  jdbcType=VARCHAR}
				             , #{item.pqcFlag,  		  jdbcType=VARCHAR}
				             , #{item.fqcFlag,  		  jdbcType=VARCHAR}
				             , #{item.oqcFlag,  		  jdbcType=VARCHAR}
				             , #{item.rpItemId,  		  jdbcType=VARCHAR}
				             , #{item.itemCategoryL,  	  jdbcType=VARCHAR}
				             , #{item.itemCategoryM,  	  jdbcType=VARCHAR}
				             , #{item.itemCategoryS,  	  jdbcType=VARCHAR}
				             , #{item.exceptionIssueFlag, jdbcType=VARCHAR}
				             , #{item.color,  		      jdbcType=VARCHAR}
				             , #{item.customerDivisionCd, jdbcType=VARCHAR}
				             , #{item.maker,  		      jdbcType=VARCHAR}
				             , #{item.abcType,  		  jdbcType=VARCHAR}
				             , #{item.drawingNo,  		  jdbcType=VARCHAR}
				             , #{item.hsCd,  		      jdbcType=VARCHAR}
				             , #{item.reorderPoint,       jdbcType=NUMERIC}
				             , #{item.safetyStockQty,     jdbcType=NUMERIC}
				             , #{item.phantomFlag,        jdbcType=VARCHAR}
				             , #{item.mrpFlag,  	      jdbcType=VARCHAR}
				             , #{item.useYn,   		      jdbcType=VARCHAR}  
				             , #{item.description,        jdbcType=VARCHAR}    
				             , TRIM(#{item.userId,        jdbcType=VARCHAR})
				             , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
				             , TRIM(#{item.userId,   jdbcType=VARCHAR})
				             , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})  
				          )		             
	            </foreach>			               
   </insert>   
   <update id="modify_defaultInfo1" parameterType="java.util.List">     
      <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
        UPDATE MOM_ITEM
        SET         ITEM_NM              = #{item.itemNm,             jdbcType=VARCHAR}
				  , ITEM_GROUP_CD        = #{item.itemGroupCd,        jdbcType=VARCHAR}
				  , ITEM_TYPE            = #{item.itemType,           jdbcType=VARCHAR}
				  , ITEM_SPEC            = #{item.itemSpec,           jdbcType=VARCHAR}
				  , UNIT                 = #{item.unit,               jdbcType=VARCHAR}
				  , PROCUREMENT_TYPE     = #{item.procurementType,    jdbcType=VARCHAR}
	              , MATERIAL_TYPE        = #{item.materialType,       jdbcType=VARCHAR}
	              , NET_WEIGHT           = #{item.netWeight,          jdbcType=NUMERIC}
	              , NET_WEIGHT_UNIT      = #{item.netWeightUnit,      jdbcType=VARCHAR}
	              , GROSS_WEIGHT         = #{item.grossWeight,        jdbcType=NUMERIC}
	              , GROSS_WEIGHT_UNIT    = #{item.grossWeightUnit,    jdbcType=VARCHAR}
	              , IN_LOCATION_CD       = #{item.inLocationCd,       jdbcType=INTEGER}
	              , OUT_LOCATION_CD      = #{item.outLocationCd,      jdbcType=VARCHAR}
	              , ISSUE_TYPE 		     = #{item.issueType,          jdbcType=VARCHAR}
	              , ISSUE_UNIT 		     = #{item.issueUnit,          jdbcType=VARCHAR}
	              , VENDOR_CD 		     = #{item.vendorCd,           jdbcType=VARCHAR}
	              , DEPARTURE_VENDOR_CD  = #{item.departureVendorCd,  jdbcType=VARCHAR}
	              , TEST_REPORT_FLAG     = #{item.testReportFlag,     jdbcType=VARCHAR}
	              , IQC_FLAG             = #{item.iqcFlag,  		  jdbcType=VARCHAR}
	              , PQC_FLAG             = #{item.pqcFlag,  		  jdbcType=VARCHAR}
	              , FQC_FLAG             = #{item.fqcFlag,  		  jdbcType=VARCHAR}
	              , OQC_FLAG             = #{item.oqcFlag,  		  jdbcType=VARCHAR}
	              , RP_ITEM_ID           = #{item.rpItemId,  		  jdbcType=VARCHAR}
	              , ITEM_CATEGORY_L      = #{item.itemCategoryL,  	  jdbcType=VARCHAR}
	              , ITEM_CATEGORY_M      = #{item.itemCategoryM,  	  jdbcType=VARCHAR}
	              , ITEM_CATEGORY_S      = #{item.itemCategoryS,  	  jdbcType=VARCHAR}
	              , EXCEPTION_ISSUE_FLAG = #{item.exceptionIssueFlag, jdbcType=VARCHAR}
	              , COLOR                = #{item.color,  		      jdbcType=VARCHAR}
	              , CUSTOMER_DIVISION_CD = #{item.customerDivisionCd, jdbcType=VARCHAR}
	              , MAKER                = #{item.maker,  		      jdbcType=VARCHAR}
	              , ABC_TYPE             = #{item.abcType,  		  jdbcType=VARCHAR}
	              , DRAWING_NO           = #{item.drawingNo,  		  jdbcType=VARCHAR}
	              , HS_CD                = #{item.hsCd,  		      jdbcType=VARCHAR}
	              , REORDER_POINT        = #{item.reorderPoint,       jdbcType=NUMERIC}
	              , SAFETY_STOCK_QTY     = #{item.safetyStockQty,     jdbcType=NUMERIC}
	              , PHANTOM_FLAG         = #{item.phantomFlag,        jdbcType=VARCHAR}
	              , MRP_FLAG             = #{item.mrpFlag,  	      jdbcType=VARCHAR}
	              , USE_YN               = #{item.useYn,   		      jdbcType=VARCHAR}  
	              , DESCRIPTION          = #{item.description,        jdbcType=VARCHAR}    
		          , UPDATE_BY            = #{item.userId,          jdbcType=VARCHAR}
		          , UPDATE_DATE          = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR}, #{item.divisionCd, jdbcType=VARCHAR})
         <where>
                    COMPANY_CD        = TRIM(#{item.companyCd,  jdbcType=VARCHAR})
         AND        DIVISION_CD       = TRIM(#{item.divisionCd, jdbcType=VARCHAR}) 
         AND        ITEM_ID           = TRIM(#{item.itemId,     jdbcType=VARCHAR}) 
         </where>
      </foreach>
   </update> 
   <delete id="remove_defaultInfo1" parameterType="java.util.List"> 
	   DELETE
	   FROM    MOM_ITEM
       <where> 
        <foreach collection="list" item="item" open="" close="" separator="OR"> 
          (   
	               COMPANY_CD     = TRIM(#{item.companyCd,  jdbcType=VARCHAR})
	         AND   DIVISION_CD    = TRIM(#{item.divisionCd, jdbcType=VARCHAR}) 
	         AND   ITEM_ID        = TRIM(#{item.itemId,     jdbcType=VARCHAR}) 
          )
        </foreach>
       </where>
   </delete>
   <insert id="upsert_defaultInfo1" parameterType="java.util.List" >
	    MERGE INTO MOM_PROGRAM MP
	    USING (
	        <foreach collection="list" item="item" open="" close="" index="i" separator="UNION">
	             SELECT           TRIM(#{item.companyCd, jdbcType=VARCHAR})                              									   as companyCd,                                              					  
	                              TRIM(#{item.divisionCd, jdbcType=VARCHAR}) 																   as divisionCd,                                 						       
	                              TRIM(#{item.programId, jdbcType=VARCHAR})                                                                    as programId,
					              #{item.programNm, jdbcType=VARCHAR}           															   as programNm,
					              TRIM(#{item.programType, jdbcType=VARCHAR})    															   as programType,
					              TRIM(#{item.templateId, jdbcType=INTEGER})     															   as templateId,
					              TRIM(#{item.logYn, jdbcType=VARCHAR})          															   as logYn,
					              TRIM(#{item.useYn, jdbcType=VARCHAR})         															   as useYn,
					              TRIM(#{item.description, jdbcType=VARCHAR})    															   as description,
					              TRIM(#{item.userId, jdbcType=VARCHAR})         															   as createBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.divisionCd, jdbcType=VARCHAR}, #{item.companyCd, jdbcType=VARCHAR})  as createDate,
					              TRIM(#{item.userId, jdbcType=VARCHAR})         															   as updateBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.divisionCd, jdbcType=VARCHAR}, #{item.companyCd, jdbcType=VARCHAR})  as updateDate
	             FROM DUAL
	        </foreach>
	    ) PARAM 
	    ON (  PROGRAM_ID    = PARAM.programId  )
	    WHEN MATCHED THEN
	    UPDATE
	    SET		  PROGRAM_NM     = PARAM.programNm
                , PROGRAM_TYPE   = PARAM.programType
                , TEMPLATE_ID    = PARAM.templateId
                , LOG_YN         = PARAM.logYn
		        , USE_YN 		 = PARAM.useYn
 		        , DESCRIPTION    = PARAM.description
		        , UPDATE_BY      = PARAM.updateBy
		        , UPDATE_DATE    = PARAM.updateDate
			    	       
	    WHEN NOT MATCHED THEN
		INSERT ( 
			      PROGRAM_ID
		        , PROGRAM_NM
		        , PROGRAM_TYPE
		        , TEMPLATE_ID
		        , LOG_YN
		        , USE_YN
		        , DESCRIPTION
		        , CREATE_BY
		        , CREATE_DATE
		        , UPDATE_BY
		        , UPDATE_DATE
	    )   
	    VALUES (
                 PARAM.programId
			   , PARAM.programNm
			   , PARAM.programType
	           , PARAM.templateId
	           , PARAM.logYn
	           , PARAM.useYn
	           , PARAM.description
			   , PARAM.createBy
			   , PARAM.createDate
			   , PARAM.updateBy
			   , PARAM.updateDate
	    )	 
	</insert>
</mapper>
