<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUMD2010">
    <select id="get_findBtn1" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
    <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
    SELECT A.*
    FROM   (
     </if>
            SELECT MI.ITEM_ID
                 , MI.ITEM_NM
                 , MI.ITEM_GROUP_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0001', MI.ITEM_GROUP_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS ITEM_GROUP_NM
                 , MI.ITEM_TYPE
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS ITEM_TYPE_NM
                 , MI.ITEM_SPEC
                 , MI.UNIT
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.UNIT, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS UNIT_NM
                 , MI.PURCHASE_UNIT
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.PURCHASE_UNIT, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS PURCHASE_NM
                 , MI.PROCUREMENT_TYPE
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0004', MI.PROCUREMENT_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS PROCUREMENT_TYPE_NM
                 , MI.MATERIAL_TYPE
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0005', MI.MATERIAL_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS MATERIAL_TYPE_NM
                 , MI.NET_WEIGHT
                 , MI.NET_WEIGHT_UNIT
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.NET_WEIGHT_UNIT, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS NET_WEIGHT_UNIT_NM
                 , MI.GROSS_WEIGHT
                 , MI.GROSS_WEIGHT_UNIT
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.GROSS_WEIGHT_UNIT, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS GROSS_WEIGHT_UNIT_NM
                 , MI.IN_LOCATION_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.IN_LOCATION_CD) FROM DUAL) AS IN_LOCATION_NM
                 , MI.OUT_LOCATION_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.OUT_LOCATION_CD) FROM DUAL) AS OUT_LOCATION_NM
                 , MI.STORAGE_LOCATION_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.STORAGE_LOCATION_CD) FROM DUAL) AS STORAGE_LOCATION_NM
                 , MI.ISSUE_TYPE
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0006', MI.ISSUE_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS ISSUE_TYPE_NM
                 , MI.ISSUE_UNIT
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0003', MI.ISSUE_UNIT, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS ISSUE_UNIT_NM
                 , MI.VENDOR_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_PARTNER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.VENDOR_CD) FROM DUAL ) AS VENDOR_NM
                 , MI.DEPARTURE_VENDOR_CD
                 , (SELECT MOM_COMMON_PKG.FN_GET_PARTNER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.DEPARTURE_VENDOR_CD) FROM DUAL ) AS DEPARTURE_VENDOR_NM
                 , MI.TEST_REPORT_FLAG
                 , MI.IQC_FLAG
                 , MI.PQC_FLAG
                 , MI.FQC_FLAG
                 , MI.OQC_FLAG
                 , MI.RP_ITEM_ID
                 , MI.ITEM_CATEGORY_L
                 , MI.ITEM_CATEGORY_M
                 , MI.ITEM_CATEGORY_S
                 , MI.EXCEPTION_ISSUE_FLAG
                 , MI.COLOR
                 , MI.CUSTOMER_DIVISION_CD
                 , MI.MAKER
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0007', MI.MAKER, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS MAKER_NM
                 , MI.ABC_TYPE
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'MD0008', MI.ABC_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS ABC_TYPE_NM
                 , MI.DRAWING_NO
                 , MI.HS_CD
                 , MI.REORDER_POINT
                 , MI.SAFETY_STOCK_QTY
                 , MI.PHANTOM_FLAG
                 , MI.MRP_FLAG
                 , MI.USE_YN
                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD,MI.DIVISION_CD, 'SM0001', MI.USE_YN, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS USE_YN_NM
                 , MI.DESCRIPTION
                 , MI.CREATE_BY
                 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.CREATE_BY) FROM DUAL ) AS CREATEBYNM
                 , TO_CHAR(MI.CREATE_DATE,'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                 , MI.UPDATE_BY
                 , MI.LOT_MANAGEMENT_YN
                 , MI.PRICE_SYNC_YN
                 , MI.PO_OVER_RECEIPT_RATE
                 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.UPDATE_BY) FROM DUAL ) AS UPDATEBYNM
                 , TO_CHAR(MI.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                 , ROWIDTOCHAR(MI.ROWID) AS GRID_ID
                 , COUNT(*) OVER() AS TOTAL_COUNT
                 , ROW_NUMBER() OVER(PARTITION BY MI.COMPANY_CD,MI.DIVISION_CD ORDER BY MI.ITEM_ID) AS KEY_ID
            FROM   MOM_ITEM MI
            WHERE  MI.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
            AND    MI.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	        <if test="itemId != null and itemId != ''">
            AND    UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemId, jdbcType=VARCHAR}) || '%' 
	        </if>
	        <if test="itemNm != null and itemNm != ''">
            AND    UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemNm , jdbcType=VARCHAR}) || '%' 
	        </if>
	        <if test="itemType != null and itemType != ''">
            AND    MI.ITEM_TYPE IN (${itemType})
	        </if>
	        <if test="itemSpec != null and itemSpec != ''">
            AND    UPPER(MI.ITEM_SPEC) LIKE '%' || TRIM(UPPER(#{itemSpec , jdbcType=VARCHAR})) || '%' 
	        </if>
	        <if test="useYn != null and useYn != ''">
            AND    MI.USE_YN = #{useYn, jdbcType=VARCHAR}
	        </if>
	<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
	       ) A
    WHERE KEY_ID BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
    </if>
    </select>
    <insert id="create_createBtn1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_ITEM( COMPANY_CD
	                 , DIVISION_CD
	                 , ITEM_ID
	                 , ITEM_NM
	                 , ITEM_GROUP_CD
	                 , ITEM_TYPE
	                 , ITEM_SPEC
	                 , UNIT
	                 , PURCHASE_UNIT
	                 , PROCUREMENT_TYPE
	                 , MATERIAL_TYPE
	                 , NET_WEIGHT
	                 , NET_WEIGHT_UNIT
	                 , GROSS_WEIGHT
	                 , GROSS_WEIGHT_UNIT
	                 , IN_LOCATION_CD
	                 , OUT_LOCATION_CD
	                 , STORAGE_LOCATION_CD
	                 , ISSUE_TYPE
	                 , ISSUE_UNIT
	                 , VENDOR_CD
	                 , DEPARTURE_VENDOR_CD
	                 , TEST_REPORT_FLAG
	                 , IQC_FLAG
	                 , PQC_FLAG
	                 , FQC_FLAG
	                 , OQC_FLAG
	                 , RP_ITEM_ID
	                 , ITEM_CATEGORY_L
	                 , ITEM_CATEGORY_M
	                 , ITEM_CATEGORY_S
	                 , EXCEPTION_ISSUE_FLAG
	                 , COLOR
	                 , CUSTOMER_DIVISION_CD
	                 , MAKER
	                 , ABC_TYPE
	                 , DRAWING_NO
	                 , HS_CD
	                 , REORDER_POINT
	                 , SAFETY_STOCK_QTY
	                 , PHANTOM_FLAG
	                 , MRP_FLAG
	                 , USE_YN
	                 , DESCRIPTION
	                 , CREATE_BY
	                 , CREATE_DATE
	                 , UPDATE_BY
	                 , UPDATE_DATE )
        VALUES  
                     ( #{item.companyCd, jdbcType=VARCHAR}
	                 , #{item.divisionCd, jdbcType=VARCHAR}
	                 , #{item.itemId, jdbcType=VARCHAR}
	                 , #{item.itemNm, jdbcType=VARCHAR}
	                 , #{item.itemGroupCd, jdbcType=VARCHAR}
	                 , #{item.itemType, jdbcType=VARCHAR}
	                 , #{item.itemSpec, jdbcType=VARCHAR}
	                 , #{item.unit, jdbcType=VARCHAR}
	                 , #{item.purchaseUnit, jdbcType=VARCHAR}
	                 , #{item.procurementType, jdbcType=VARCHAR}
	                 , #{item.materialType, jdbcType=VARCHAR}
	                 , #{item.netWeight, jdbcType=NUMERIC}
	                 , #{item.netWeightUnit, jdbcType=VARCHAR}
	                 , #{item.grossWeight, jdbcType=NUMERIC}
	                 , #{item.grossWeightUnit, jdbcType=VARCHAR}
	                 , #{item.inLocationCd, jdbcType=VARCHAR}
	                 , #{item.outLocationCd, jdbcType=VARCHAR}
	                 , #{item.storageLocationCd, jdbcType=VARCHAR}
	                 , #{item.issueType, jdbcType=VARCHAR}
	                 , #{item.issueUnit, jdbcType=VARCHAR}
	                 , #{item.vendorCd, jdbcType=VARCHAR}
	                 , #{item.departureVendorCd, jdbcType=VARCHAR}
	                 , #{item.testReportFlag, jdbcType=VARCHAR}
	                 , #{item.iqcFlag, jdbcType=VARCHAR}
	                 , #{item.pqcFlag, jdbcType=VARCHAR}
	                 , #{item.fqcFlag, jdbcType=VARCHAR}
	                 , #{item.oqcFlag, jdbcType=VARCHAR}
	                 , #{item.rpItemId, jdbcType=VARCHAR}
	                 , #{item.itemCategoryL, jdbcType=VARCHAR}
	                 , #{item.itemCategoryM, jdbcType=VARCHAR}
	                 , #{item.itemCategoryS, jdbcType=VARCHAR}
	                 , #{item.exceptionIssueFlag, jdbcType=VARCHAR}
	                 , #{item.color, jdbcType=VARCHAR}
	                 , #{item.customerDivisionCd, jdbcType=VARCHAR}
	                 , #{item.maker, jdbcType=VARCHAR}
	                 , #{item.abcType, jdbcType=VARCHAR}
	                 , #{item.drawingNo, jdbcType=VARCHAR}
	                 , #{item.hsCd, jdbcType=VARCHAR}
	                 , #{item.reorderPoint, jdbcType=NUMERIC}
	                 , #{item.safetyStockQty, jdbcType=NUMERIC}
	                 , #{item.phantomFlag, jdbcType=VARCHAR}
	                 , #{item.mrpFlag, jdbcType=VARCHAR}
	                 , #{item.useYn, jdbcType=VARCHAR}
	                 , #{item.description, jdbcType=VARCHAR}
	                 , #{item.userId, jdbcType=VARCHAR}
	                 , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
	                 , #{item.userId, jdbcType=VARCHAR}
	                 , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                     )
        </foreach>
    </insert>
    <update id="modify_editBtn1" parameterType="java.util.List">
        <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
        UPDATE MOM_ITEM
        SET    ITEM_NM = #{item.itemNm, jdbcType=VARCHAR}
	         , ITEM_GROUP_CD = #{item.itemGroupCd, jdbcType=VARCHAR}
	         , ITEM_TYPE = #{item.itemType, jdbcType=VARCHAR}
	         , ITEM_SPEC = #{item.itemSpec, jdbcType=VARCHAR}
	         , UNIT = #{item.unit, jdbcType=VARCHAR}
	         , PURCHASE_UNIT = #{item.purchaseUnit, jdbcType=VARCHAR}
	         , PROCUREMENT_TYPE = #{item.procurementType, jdbcType=VARCHAR}
	         , MATERIAL_TYPE = #{item.materialType, jdbcType=VARCHAR}
	         , NET_WEIGHT = #{item.netWeight, jdbcType=NUMERIC}
	         , NET_WEIGHT_UNIT = #{item.netWeightUnit, jdbcType=VARCHAR}
	         , GROSS_WEIGHT = #{item.grossWeight, jdbcType=NUMERIC}
	         , GROSS_WEIGHT_UNIT = #{item.grossWeightUnit, jdbcType=VARCHAR}
	         , IN_LOCATION_CD = #{item.inLocationCd, jdbcType=VARCHAR}
	         , OUT_LOCATION_CD = #{item.outLocationCd, jdbcType=VARCHAR}
	         , STORAGE_LOCATION_CD = #{item.storageLocationCd, jdbcType=VARCHAR}
	         , ISSUE_TYPE = #{item.issueType, jdbcType=VARCHAR}
	         , ISSUE_UNIT = #{item.issueUnit, jdbcType=VARCHAR}
	         , VENDOR_CD = #{item.vendorCd, jdbcType=VARCHAR}
	         , DEPARTURE_VENDOR_CD = #{item.departureVendorCd, jdbcType=VARCHAR}
	         , TEST_REPORT_FLAG = #{item.testReportFlag, jdbcType=VARCHAR}
	         , IQC_FLAG = #{item.iqcFlag, jdbcType=VARCHAR}
	         , PQC_FLAG = #{item.pqcFlag, jdbcType=VARCHAR}
	         , FQC_FLAG = #{item.fqcFlag, jdbcType=VARCHAR}
	         , OQC_FLAG = #{item.oqcFlag, jdbcType=VARCHAR}
	         , RP_ITEM_ID = #{item.rpItemId, jdbcType=VARCHAR}
	         , ITEM_CATEGORY_L = #{item.itemCategoryL, jdbcType=VARCHAR}
	         , ITEM_CATEGORY_M = #{item.itemCategoryM, jdbcType=VARCHAR}
	         , ITEM_CATEGORY_S = #{item.itemCategoryS, jdbcType=VARCHAR}
	         , EXCEPTION_ISSUE_FLAG = #{item.exceptionIssueFlag, jdbcType=VARCHAR}
	         , COLOR = #{item.color, jdbcType=VARCHAR}
	         , CUSTOMER_DIVISION_CD = #{item.customerDivisionCd, jdbcType=VARCHAR}
	         , MAKER = #{item.maker, jdbcType=VARCHAR}
	         , ABC_TYPE = #{item.abcType, jdbcType=VARCHAR}
	         , DRAWING_NO = #{item.drawingNo, jdbcType=VARCHAR}
	         , HS_CD = #{item.hsCd, jdbcType=VARCHAR}
	         , REORDER_POINT = #{item.reorderPoint, jdbcType=NUMERIC}
	         , SAFETY_STOCK_QTY = #{item.safetyStockQty, jdbcType=NUMERIC}
	         , PHANTOM_FLAG = #{item.phantomFlag, jdbcType=VARCHAR}
	         , MRP_FLAG = #{item.mrpFlag, jdbcType=VARCHAR}
	         , USE_YN = #{item.useYn, jdbcType=VARCHAR}
	         , DESCRIPTION = #{item.description, jdbcType=VARCHAR}
	         , UPDATE_BY = #{item.userId, jdbcType=VARCHAR}
	         , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
	    WHERE  1=1
	    AND    COMPANY_CD = #{item.companyCd, jdbcType=VARCHAR}
	    AND    DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
	    AND    ITEM_ID = #{item.itemId, jdbcType=VARCHAR}
        </foreach>
    </update>
    <delete id="remove_delBtn1" parameterType="java.util.List">
    DELETE FROM MOM_ITEM
        <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
	        (       COMPANY_CD = #{item.companyCd, jdbcType=VARCHAR}
	           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
	           AND  ITEM_ID = #{item.itemId, jdbcType=VARCHAR}
	        )
            </foreach>
        </where>
    </delete>
    <insert id="upsert_excelUpBtn1" parameterType="java.util.HashMap" flushCache="true">
    MERGE INTO MOM_ITEM 
        USING( SELECT #{companyCd, jdbcType=VARCHAR} as companyCd,
                      #{divisionCd, jdbcType=VARCHAR} as divisionCd,
                      #{itemId, jdbcType=VARCHAR} as itemId,
                      #{itemNm, jdbcType=VARCHAR} as itemNm,
                      #{itemGroupCd, jdbcType=VARCHAR} as itemGroupCd,
                      #{itemType, jdbcType=VARCHAR} as itemType,
                      #{itemSpec, jdbcType=VARCHAR} as itemSpec,
                      #{unit, jdbcType=VARCHAR} as unit,
                      #{purchaseUnit, jdbcType=VARCHAR} as purchaseUnit,
                      #{procurementType, jdbcType=VARCHAR} as procurementType,
                      #{materialType, jdbcType=VARCHAR} as materialType,
                      #{netWeight, jdbcType=NUMERIC} as netWeight,
                      #{netWeightUnit, jdbcType=VARCHAR} as netWeightUnit,
                      #{grossWeight, jdbcType=NUMERIC} as grossWeight,
                      #{grossWeightUnit, jdbcType=VARCHAR} as grossWeightUnit,
                      #{inLocationCd, jdbcType=VARCHAR} as inLocationCd,
                      #{outLocationCd, jdbcType=VARCHAR} as outLocationCd,
                      #{storageLocationCd, jdbcType=VARCHAR} as storageLocationCd,
                      #{issueType, jdbcType=VARCHAR} as issueType,
                      #{issueUnit, jdbcType=VARCHAR} as issueUnit,
                      #{vendorCd, jdbcType=VARCHAR} as vendorCd,
                      #{departureVendorCd, jdbcType=VARCHAR} as departureVendorCd,
                      #{testReportFlag, jdbcType=VARCHAR} as testReportFlag,
                      #{iqcFlag, jdbcType=VARCHAR} as iqcFlag,
                      #{pqcFlag, jdbcType=VARCHAR} as pqcFlag,
                      #{fqcFlag, jdbcType=VARCHAR} as fqcFlag,
                      #{oqcFlag, jdbcType=VARCHAR} as oqcFlag,
                      #{rpItemId, jdbcType=VARCHAR} as rpItemId,
                      #{itemCategoryL, jdbcType=VARCHAR} as itemCategoryL,
                      #{itemCategoryM, jdbcType=VARCHAR} as itemCategoryM,
                      #{itemCategoryS, jdbcType=VARCHAR} as itemCategoryS,
                      #{exceptionIssueFlag, jdbcType=VARCHAR} as exceptionIssueFlag,
                      #{color, jdbcType=VARCHAR} as color,
                      #{customerDivisionCd, jdbcType=VARCHAR} as customerDivisionCd,
                      #{maker, jdbcType=VARCHAR} as maker,
                      #{abcType, jdbcType=VARCHAR} as abcType,
                      #{drawingNo, jdbcType=VARCHAR} as drawingNo,
                      #{hsCd, jdbcType=VARCHAR} as hsCd,
                      #{reorderPoint, jdbcType=NUMERIC} as reorderPoint,
                      #{safetyStockQty, jdbcType=NUMERIC} as safetyStockQty,
                      #{phantomFlag, jdbcType=VARCHAR} as phantomFlag,
                      #{mrpFlag, jdbcType=VARCHAR} as mrpFlag,
                      #{useYn, jdbcType=VARCHAR} as useYn,
                      #{description, jdbcType=VARCHAR} as description,
                      #{userId, jdbcType=VARCHAR} as createBy,
                      MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as createDate,
                      #{userId, jdbcType=VARCHAR} as updateBy,
                      MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as updateDate
               FROM DUAL
               ) PARAM
        ON ( COMPANY_CD = PARAM.companyCd AND
             DIVISION_CD = PARAM.divisionCd AND
             ITEM_ID = PARAM.itemId )
        WHEN MATCHED THEN 
            UPDATE SET ITEM_NM = PARAM.itemNm
                     , ITEM_GROUP_CD = PARAM.itemGroupCd
                     , ITEM_TYPE = PARAM.itemType
                     , ITEM_SPEC = PARAM.itemSpec
                     , UNIT = PARAM.unit
                     , PURCHASE_UNIT = PARAM.purchaseUnit
                     , PROCUREMENT_TYPE = PARAM.procurementType
                     , MATERIAL_TYPE = PARAM.materialType
                     , NET_WEIGHT = PARAM.netWeight
                     , NET_WEIGHT_UNIT = PARAM.netWeightUnit
                     , GROSS_WEIGHT = PARAM.grossWeight
                     , GROSS_WEIGHT_UNIT = PARAM.grossWeightUnit
                     , IN_LOCATION_CD = PARAM.inLocationCd
                     , OUT_LOCATION_CD = PARAM.outLocationCd
                     , STORAGE_LOCATION_CD = PARAM.storageLocationCd
                     , ISSUE_TYPE = PARAM.issueType
                     , ISSUE_UNIT = PARAM.issueUnit
                     , VENDOR_CD = PARAM.vendorCd
                     , DEPARTURE_VENDOR_CD = PARAM.departureVendorCd
                     , TEST_REPORT_FLAG = PARAM.testReportFlag
                     , IQC_FLAG = PARAM.iqcFlag
                     , PQC_FLAG = PARAM.pqcFlag
                     , FQC_FLAG = PARAM.fqcFlag
                     , OQC_FLAG = PARAM.oqcFlag
                     , RP_ITEM_ID = PARAM.rpItemId
                     , ITEM_CATEGORY_L = PARAM.itemCategoryL
                     , ITEM_CATEGORY_M = PARAM.itemCategoryM
                     , ITEM_CATEGORY_S = PARAM.itemCategoryS
                     , EXCEPTION_ISSUE_FLAG = PARAM.exceptionIssueFlag
                     , COLOR = PARAM.color
                     , CUSTOMER_DIVISION_CD = PARAM.customerDivisionCd
                     , MAKER = PARAM.maker
                     , ABC_TYPE = PARAM.abcType
                     , DRAWING_NO = PARAM.drawingNo
                     , HS_CD = PARAM.hsCd
                     , REORDER_POINT = PARAM.reorderPoint
                     , SAFETY_STOCK_QTY = PARAM.safetyStockQty
                     , PHANTOM_FLAG = PARAM.phantomFlag
                     , MRP_FLAG = PARAM.mrpFlag
                     , USE_YN = PARAM.useYn
                     , DESCRIPTION = PARAM.description
                     , CREATE_BY = PARAM.createBy
                     , CREATE_DATE = PARAM.createDate
                     , UPDATE_BY = PARAM.updateBy
                     , UPDATE_DATE = PARAM.updateDate
        WHEN NOT MATCHED THEN
            INSERT( COMPANY_CD
                  , DIVISION_CD
                  , ITEM_ID
                  , ITEM_NM
                  , ITEM_GROUP_CD
                  , ITEM_TYPE
                  , ITEM_SPEC
                  , UNIT
                  , PURCHASE_UNIT
                  , PROCUREMENT_TYPE
                  , MATERIAL_TYPE
                  , NET_WEIGHT
                  , NET_WEIGHT_UNIT
                  , GROSS_WEIGHT
                  , GROSS_WEIGHT_UNIT
                  , IN_LOCATION_CD
                  , OUT_LOCATION_CD
                  , STORAGE_LOCATION_CD 
                  , ISSUE_TYPE
                  , ISSUE_UNIT
                  , VENDOR_CD
                  , DEPARTURE_VENDOR_CD
                  , TEST_REPORT_FLAG
                  , IQC_FLAG
                  , PQC_FLAG
                  , FQC_FLAG
                  , OQC_FLAG
                  , RP_ITEM_ID
                  , ITEM_CATEGORY_L
                  , ITEM_CATEGORY_M
                  , ITEM_CATEGORY_S
                  , EXCEPTION_ISSUE_FLAG
                  , COLOR
                  , CUSTOMER_DIVISION_CD
                  , MAKER
                  , ABC_TYPE
                  , DRAWING_NO
                  , HS_CD
                  , REORDER_POINT
                  , SAFETY_STOCK_QTY
                  , PHANTOM_FLAG
                  , MRP_FLAG
                  , USE_YN
                  , DESCRIPTION
                  , CREATE_BY
                  , CREATE_DATE
                  , UPDATE_BY
                  , UPDATE_DATE )
           VALUES ( PARAM.companyCd
                  , PARAM.divisionCd
                  , PARAM.itemId
                  , PARAM.itemNm
                  , PARAM.itemGroupCd
                  , PARAM.itemType
                  , PARAM.itemSpec
                  , PARAM.unit
                  , PARAM.purchaseUnit
                  , PARAM.procurementType
                  , PARAM.materialType
                  , PARAM.netWeight
                  , PARAM.netWeightUnit
                  , PARAM.grossWeight
                  , PARAM.grossWeightUnit
                  , PARAM.inLocationCd
                  , PARAM.outLocationCd
                  , PARAM.storageLocationCd
                  , PARAM.issueType
                  , PARAM.issueUnit
                  , PARAM.vendorCd
                  , PARAM.departureVendorCd
                  , PARAM.testReportFlag
                  , PARAM.iqcFlag
                  , PARAM.pqcFlag
                  , PARAM.fqcFlag
                  , PARAM.oqcFlag
                  , PARAM.rpItemId
                  , PARAM.itemCategoryL
                  , PARAM.itemCategoryM
                  , PARAM.itemCategoryS
                  , PARAM.exceptionIssueFlag
                  , PARAM.color
                  , PARAM.customerDivisionCd
                  , PARAM.maker
                  , PARAM.abcType
                  , PARAM.drawingNo
                  , PARAM.hsCd
                  , PARAM.reorderPoint
                  , PARAM.safetyStockQty
                  , PARAM.phantomFlag
                  , PARAM.mrpFlag
                  , PARAM.useYn
                  , PARAM.description
                  , PARAM.createBy
                  , PARAM.createDate
                  , PARAM.updateBy
                  , PARAM.updateDate )
    </insert>
 
</mapper>
