<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUPP3040">
	<select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
       SELECT MWO.COMPANY_CD
		     , MWO.DIVISION_CD
		     , MWO.WORK_ORDER_ID   
		     , MWO.WORK_ORDER_ID  AS KEY_ID
		     , MWO.WO_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0002', MWO.WO_TYPE, 'KR') FROM DUAL)  AS WO_TYPE_NM
		     , MWO.ITEM_ID
		     , MI.ITEM_NM
		     , MI.ITEM_TYPE
		     , MI.LOT_MANAGEMENT_YN
		     , MI.PRICE_SYNC_YN  
		     , MI.PO_OVER_RECEIPT_RATE 
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, 'KR') FROM DUAL)  AS ITEM_TYPE_NM
		     , MI.ITEM_SPEC
		     , MWG.WORK_GROUP_CD
		     , MWG.WORK_GROUP_NM
		     , MWO.WORK_CENTER_CD
		     , MWC.WORK_CENTER_NM
		     , MWO.CONSUME_LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.fn_get_location_name(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_LOCATION_CD) FROM DUAL) AS CONSUME_LOCATION_NM  
		     , MWO.GOOD_LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.fn_get_location_name(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.GOOD_LOCATION_CD) FROM DUAL) AS GOOD_LOCATION_NM
		     , MWO.DEFECT_LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.fn_get_location_name(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.DEFECT_LOCATION_CD) FROM DUAL) AS DEFECT_LOCATION_NM
		     , MWO.ROUTING_ID
		     , (SELECT MOM_COMMON_PKG.FN_GET_ROUTING_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.ROUTING_ID) FROM DUAL) AS ROUTING_NM
		     , MWO.WO_STATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0003', MWO.WO_STATE, 'KR') FROM DUAL)  AS WO_STATE_NM
		     , MWO.WO_QTY
		     , MWO.GOOD_QTY
		     , MWO.DEFECT_QTY 
		     , MWO.CANCEL_QTY
		     , MWO.WO_QTY + NVL(MWO.GOOD_QTY, 0) + NVL(MWO.DEFECT_QTY, 0) + NVL(MWO.CANCEL_QTY,0) AS REMAIN_QTY
		     , TO_CHAR(MWO.PLAN_DATE  ,'YYYY-MM-DD')      AS PLAN_DATE
		     , TO_CHAR(MWO.WO_START_TIME  ,'YYYY-MM-DD')  AS WO_START_TIME
		     , TO_CHAR(MWO.WO_END_TIME  ,'YYYY-MM-DD')    AS WO_END_TIME
		     , MWO.PRIORITY
		     , MWO.DEMAND_ID
		     , MWO.PARENT_WO_ID
		     , MWO.CLOSE_YN
		     , MWO.OUTSOURCING_YN
		     , MWO.MANUAL_YN
		     , MWO.BOR_ID
		     , MWO.REASON_CD AS WO_REASON_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0005', MWO.REASON_CD, 'KR') FROM DUAL)  AS REASON_NM
		     , MWO.DESCRIPTION
		     , MWO.UPDATE_BY
		     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.UPDATE_BY) FROM DUAL ) AS UPDATEBYNM
		     , TO_CHAR(MWO.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		FROM   MOM_WORK_ORDER MWO
		     , MOM_ITEM MI
		     , MOM_WORK_CENTER MWC
		     , MOM_WORK_GROUP  MWG
		WHERE  MWO.COMPANY_CD      = MI.COMPANY_CD
		AND    MWO.DIVISION_CD     = MI.DIVISION_CD
		AND    MWO.ITEM_ID         = MI.ITEM_ID  
		AND    MWO.COMPANY_CD      = MWC.COMPANY_CD
		AND    MWO.DIVISION_CD     = MWC.DIVISION_CD
		AND    MWO.WORK_CENTER_CD  = MWC.WORK_CENTER_CD     
		AND    MWC.COMPANY_CD      = MWG.COMPANY_CD
		AND    MWC.DIVISION_CD     = MWG.DIVISION_CD
		AND    MWC.WORK_GROUP_CD   = MWG.WORK_GROUP_CD  
		AND    MWO.COMPANY_CD      = #{companyCd, jdbcType=VARCHAR}
		AND    MWO.DIVISION_CD     = #{divisionCd, jdbcType=VARCHAR}
	    AND    MWO.WO_START_TIME BETWEEN TO_DATE(#{woStartDateSD, jdbcType=VARCHAR}, 'YYYY-MM-DD')  AND TO_DATE(#{woStartDateED, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 0.99999
	    AND   (UPPER(MWO.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm, jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm, jdbcType=VARCHAR}) || '%')	 
	    <if test="itemIdNm != null and itemIdNm != ''">
		AND (UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}))
		</if> 
		<if test="workOrderId != null and workOrderId != ''">
		AND (UPPER(MWO.WORK_ORDER_ID ) LIKE '%' || UPPER(#{workOrderId, jdbcType=VARCHAR}) || '%')	  
		</if>
	    <if test="workGroupCd != null and workGroupCd != ''">
		AND MWG.WORK_GROUP_CD IN (${workGroupCd})`
		</if>	
		<if test="workCenterCd != null and workCenterCd != ''">
		AND MPO.WORK_CENTER_CD IN (${workCenterCd})
		</if>	
		<if test="woState != null and woState != ''">
		AND MWO.WO_STATE IN (${woState})
		</if>
		<if test="outsourcingYn != null and outsourcingYn != ''">
		AND MPO.OUTSOURCING_YN =  #{outsourcingYn, jdbcType=VARCHAR}
		</if>	
		<if test="woType != null and woType != ''">
		AND MWO.WO_TYPE =  #{woType, jdbcType=VARCHAR}
		</if>	
		<if test="manualYn != null and manualYn != ''">
		AND MWO.MANUAL_YN =  #{manualYn, jdbcType=VARCHAR}
		</if>	
ORDER BY MWG.WORK_GROUP_NM
      , MWC.WORK_CENTER_NM
      , MWO.WO_START_TIME
      , MWO.PRIORITY
      , MWO.ITEM_ID
	</select>
	<select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
		SELECT MWI.COMPANY_CD
		     , MWI.DIVISION_CD
		     , MWI.WORK_ORDER_ID
		     , MWI.ISSUE_REQUEST_ID
		     , MWI.ITEM_ID
		     , MI.ITEM_NM
		     , MI.ITEM_SPEC
		     , MI.ITEM_TYPE
		     , MI.LOT_MANAGEMENT_YN
		     , MI.PRICE_SYNC_YN  
		     , MI.PO_OVER_RECEIPT_RATE 
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWI.COMPANY_CD, MWI.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, 'KR') FROM DUAL)  AS ITEM_TYPE_NM
		     , MWI.ISSUE_LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWI.COMPANY_CD, MWI.DIVISION_CD, MWI.ISSUE_LOCATION_CD) FROM DUAL) AS ISSUE_LOCATION_NM
		     , NVL(MWI.REQUEST_LOCATION_CD, '상단의 소진창고') AS REQUEST_LOCATION_CD
		     , TO_CHAR(MWI.REQUEST_DATE ,'YYYY-MM-DD HH24:MI:SS') AS REQUEST_DATE
		     , MWI.REQ_QTY
		     , MWI.ORIGIN_REQUEST_QTY
		     , MWI.ISSUE_REQUEST_QTY 
		     , MWI.ISSUE_REQUEST_QTY AS REQUEST_QTY
		     , MWI.ISSUE_QTY
		     , MWI.CANCEL_QTY
		     , MWI.ISSUE_REQUEST_QTY - NVL(MWI.ISSUE_QTY,0)- NVL(MWI.CANCEL_QTY,0) AS REMAIN_QTY
		     , MWI.REASON_CD AS ISSUE_REASON_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWI.COMPANY_CD, MWI.DIVISION_CD, 'PP0006', MWI.REASON_CD, 'KR') FROM DUAL)  AS REASON_NM
		     , MWI.ISSUE_REQUEST_TYPE 
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWI.COMPANY_CD, MWI.DIVISION_CD, 'PP0008', MWI.ISSUE_REQUEST_TYPE, 'KR') FROM DUAL)  AS ISSUE_REQUEST_NM
		     , MWI.DEDUCT_YN
		     , MWI.DESCRIPTION
		     , MWI.UPDATE_BY
		     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWI.COMPANY_CD, MWI.DIVISION_CD, MWI.UPDATE_BY) FROM DUAL ) AS UPDATEBYNM
		     , TO_CHAR(MWI.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		FROM   MOM_WO_ISSUE_REQUEST_LIST MWI
		     , MOM_ITEM MI
		WHERE  MWI.COMPANY_CD      = MI.COMPANY_CD
		AND    MWI.DIVISION_CD     = MI.DIVISION_CD
		AND    MWI.ITEM_ID         = MI.ITEM_ID  
		AND    MWI.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND    MWI.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
		AND    MWI.WORK_ORDER_ID = #{workOrderId, jdbcType=VARCHAR}
		ORDER BY MI.ITEM_ID

	</select>
	<delete id="remove_saveBtn2" parameterType="java.util.List">
        DELETE FROM MOM_PROC_WO_ISSUE_REQ_LIST
      <where>
       <foreach collection="list" item="item" open="" close="" separator="OR">
        (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
        )
       </foreach>
      </where>
   </delete>  
   <insert id="create_saveBtn2" parameterType="java.util.List">
   <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
     INTO MOM_PROC_WO_ISSUE_REQ_LIST (
                  COMPANY_CD
                , DIVISION_CD
                , WORK_ORDER_ID
                , ISSUE_REQUEST_ID
                , ITEM_ID
                , ISSUE_LOCATION_CD
                , REQUEST_LOCATION_CD
                , REQUEST_DATE
                , ISSUE_REQUEST_QTY
                , REQ_QTY
                , REASON_CD
                , ISSUE_REQUEST_TYPE
                , DEDUCT_YN
                , DESCRIPTION
                , VAL_MSG
                , MULTI_MSG
                , CREATE_BY
                , CREATE_DATE )
      VALUES 
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.workOrderId, jdbcType=VARCHAR}
                , #{item.issueRequestId, jdbcType=VARCHAR}
                , #{item.itemId, jdbcType=VARCHAR}
                , #{item.issueLocationCd, jdbcType=VARCHAR}
                , #{item.requestLocationCd, jdbcType=VARCHAR}
                , TO_DATE(#{item.requestDate, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS') 
                , #{item.requestQty, jdbcType=NUMERIC}
                , #{item.reqQty, jdbcType=NUMERIC}
                , #{item.issueReasonCd, jdbcType=VARCHAR}
                , #{item.issueRequestType, jdbcType=VARCHAR}
                , #{item.deductYn, jdbcType=VARCHAR}
                , #{item.description, jdbcType=VARCHAR}
                , #{item.valMsg, jdbcType=VARCHAR}
                , #{item.multiMsg, jdbcType=VARCHAR}
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
   </foreach>
  </insert>
  <select id="proc_saveBtn2" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
          { CALL MOM_WO_PKG.sp_xupp3040_cu_proc(     		    #{p_err_code, jdbcType=VARCHAR, mode=OUT}
					                                          , #{p_err_msg,  jdbcType=VARCHAR, mode=OUT}
					                                          , #{companyCd,  javaType=string,  jdbcType=VARCHAR , mode=IN}
					                                          , #{divisionCd, jdbcType=VARCHAR, mode=IN}											  
					                                          , #{userId,     jdbcType=VARCHAR, mode=IN} )}    	              
  </select>  
</mapper>