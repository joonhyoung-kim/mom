<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUSM2020">
<!--     <parameterMap id="paramMap" type="hashMap">
    	<parameter property="cd"         mode="IN"  jdbcType="VARCHAR" javaType = "java.lang.String"/>
    	
    	<parameter property="p_err_code" mode="OUT" jdbcType="VARCHAR" javaType = "string"/>   
    	<parameter property="p_err_code" mode="OUT" jdbcType="VARCHAR" javaType = "string"/>   
    </parameterMap> -->
	
      <select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">    
		  SELECT LEVEL
		       , A.MENU_ID 
		       , A.PARENT_MENU_ID 
		       , A.MENU_NM
		       , A.SORT_NO
		       , A.USE_YN AS USE_YN_FLAG
		       , A.MENU_TYPE
		  FROM ( WITH C_DIV AS ( SELECT MDM.MENU_ID  
		                              , MDM.MENU_NM 
		                                   , MDM.PARENT_MENU_ID 
		                                   , MDM.SORT_NO 
		                                   , MDM.USE_YN 
		                              FROM  MOM_DIVISION_MENU MDM    
		                              WHERE MDM.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR} 
		                              AND   MDM.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} )
		              SELECT   MM.MENU_ID 
			                ,  NVL(S.PARENT_MENU_ID , MM.PARENT_MENU_ID ) AS PARENT_MENU_ID 
			                ,  NVL(S.MENU_NM , MM.MENU_NM )  AS MENU_NM 
			                , S.SORT_NO   
		                    , CASE WHEN S.MENU_ID IS NOT NULL THEN S.USE_YN ELSE 'N' END AS USE_YN 
		                    , MENU_TYPE
		              FROM    MOM_MENU MM
		                    , C_DIV    S                 
		              WHERE   MM.MENU_ID  = S.MENU_ID (+)  
		              AND     MM.USE_YN  = 'Y'     ) A
			  START WITH  A.PARENT_MENU_ID = '-' 
			  CONNECT BY PRIOR  A.MENU_ID = A.PARENT_MENU_ID  
			  ORDER SIBLINGS BY A.PARENT_MENU_ID,A.SORT_NO, A.MENU_ID 		                	  
	 </select>
     <select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">
         SELECT MC.COMPANY_CD
	          , MC.COMPANY_NM
	          , MC.DIVISION_CD
	          , MC.DIVISION_NM
	          , MC.CODE AS LANG_CODE
	          , MC.CODE_NM AS LANG_NM
	          , #{menuId, jdbcType=VARCHAR} AS MENU_ID    
	          , NVL((SELECT MOM_COMMON_PKG.FN_GET_MULTI_LANGUAGE(MC.COMPANY_CD,MC.DIVISION_CD,MC.CODE,'MENU',#{menuId, jdbcType=VARCHAR}) 
	                 FROM   DUAL ), DECODE(MC.attribute1, 'Y', #{menuNm, jdbcType=VARCHAR}, '' )) AS MENU_NM
		 FROM   MOM_CODE_V MC
		 WHERE  MC.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		 AND    MC.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND    MC.GROUP_CD    = 'SM0012'
		 AND    MC.USE_YN      = 'Y'
		 ORDER BY MC.COMPANY_CD
		        , MC.DIVISION_CD
		        , MC.SORT_NO
     </select>         
       <insert id="create_createBtn1" parameterType="java.util.List">
   <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
     INTO MOM_DIVISION_MENU (
                  COMPANY_CD
                , DIVISION_CD
                , MENU_ID
                , MENU_NM
                , PARENT_MENU_ID
                , SORT_NO
                , USE_YN
                , DESCRIPTION
                , CREATE_BY
                , CREATE_DATE
                , UPDATE_BY
                , UPDATE_DATE )
      VALUES 
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.menuId, jdbcType=VARCHAR}
                , #{item.menuNm, jdbcType=VARCHAR}
                , #{item.parentMenuId, jdbcType=VARCHAR}
                , #{item.sortNo, jdbcType=NUMERIC}
                , 'Y'
                , #{item.description, jdbcType=VARCHAR}
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
   </foreach>
  </insert> 
    <delete id="remove_delBtn1" statementType="CALLABLE"  parameterType="java.util.List">
     <foreach collection="list" item="item" open="{ CALL DECLARE " close="}" separator="">              
       BEGIN   
       #{item.resultCode, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'S'; 
       DELETE FROM MOM_AUTH_MENU
       WHERE  COMPANY_CD    = #{item.companyCd, jdbcType=VARCHAR}
       AND    DIVISION_CD   = #{item.divisionCd, jdbcType=VARCHAR}
       AND    AUTH_GROUP_CD = #{item.authGroupCd, jdbcType=VARCHAR}        
       ;     
       DELETE FROM MOM_DIVISION_MENU
       WHERE  COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
       AND    DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
       ;
       COMMIT;
       SELECT
	    CASE 
	    WHEN COUNT(MENU_ID) = 0 THEN 'S'
				ELSE 'E' 
		END  
			INTO #{item.resultCode, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_DIVISION_MENU
		WHERE  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
	    AND COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
		;	
		END
     </foreach>
    </delete>
	 <insert id="upsert_saveBtn1" parameterType="java.util.HashMap">
	    MERGE INTO MOM_DIVISION_MENU MDM
	    USING (
	      
	             SELECT           TRIM(#{companyCd, jdbcType=VARCHAR})                              									   as companyCd,                                              					  
	                              TRIM(#{divisionCd, jdbcType=VARCHAR}) 																   as divisionCd,                                 						       
	                              TRIM(#{menuId, jdbcType=VARCHAR}) 																	   as menuId,           														   
					              NVL(#{menuNm, jdbcType=VARCHAR},'') 																	   as menuNm,             															   
					              TRIM(#{parentMenuId, jdbcType=VARCHAR}) 																   as parentMenuId, 													           
					              TRIM(#{sortNo, jdbcType=VARCHAR})   												                       as sortNo, 
					              TRIM(#{useYnFlag, jdbcType=VARCHAR})																	   as useYn,
					              TRIM(#{userId, jdbcType=VARCHAR})       															       as createBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR})         as createDate,
					              TRIM(#{userId, jdbcType=VARCHAR})                                                                        as updateBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR}, #{divisionCd, jdbcType=VARCHAR})        as updateDate
	             FROM DUAL
	   
	    ) PARAM 
	    ON ( MDM.COMPANY_CD  = PARAM.companyCd
	    AND  MDM.DIVISION_CD = PARAM.divisionCd
	    AND  MDM.MENU_ID     = PARAM.menuId	   	    	    
	       )
	    WHEN MATCHED THEN
	    UPDATE
	    SET		  MDM.MENU_NM        = PARAM.menuNm
			    , MDM.PARENT_MENU_ID = PARAM.parentMenuId
	            , MDM.SORT_NO        = PARAM.sortNo
			    , MDM.UPDATE_BY      = PARAM.updateBy
			    , MDM.UPDATE_DATE    = PARAM.updateDate
			    , MDM.USE_YN         = PARAM.useYn
	       
	    WHEN NOT MATCHED THEN
		INSERT ( MDM.COMPANY_CD
	           , MDM.DIVISION_CD
			   , MDM.MENU_ID
			   , MDM.MENU_NM
			   , MDM.PARENT_MENU_ID
			   , MDM.SORT_NO
			   , MDM.USE_YN
			   , MDM.CREATE_BY
			   , MDM.CREATE_DATE
			   , MDM.UPDATE_BY
			   , MDM.UPDATE_DATE
	    )   
	    VALUES ( PARAM.companyCd
			   , PARAM.divisionCd
               , PARAM.menuId
			   , PARAM.menuNm
			   , PARAM.parentMenuId
	           , PARAM.sortNo
	           , PARAM.useYn
			   , PARAM.createBy
			   , PARAM.createDate
			   , PARAM.updateBy
			   , PARAM.updateDate
	    )	 
	</insert>
    <insert id="upsert_saveBtn2" parameterType="java.util.HashMap">
	    MERGE INTO MOM_MESSAGE MM
	    USING (
	             SELECT           TRIM(#{companyCd, jdbcType=VARCHAR})                              									   as companyCd,                                              					  
	                              TRIM(#{divisionCd, jdbcType=VARCHAR}) 																   as divisionCd,                                 						       
	                              TRIM(#{langCode, jdbcType=VARCHAR}) 																	   as langCd, 
	                              TRIM(#{msgType, jdbcType=VARCHAR})																	   as msgType,       
	                              TRIM(#{menuId, jdbcType=VARCHAR})																	       as msgCd,        														   
					              #{menuNm, jdbcType=VARCHAR} 																	           as msgNm,             															   											           
					              'Y'										                                                               as useYn, 	
					              '' 																      							       as description, 					              
					              TRIM(#{userId, jdbcType=VARCHAR})       															       as createBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})  as createDate,
					              TRIM(#{userId, jdbcType=VARCHAR})                                                                       as updateBy,
					              MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})  as updateDate
	             FROM DUAL
	    ) PARAM 
	    ON ( COMPANY_CD  = PARAM.companyCd
	    AND  DIVISION_CD = PARAM.divisionCd
	    AND  LANG_CD     = PARAM.langCd
	    AND  MSG_CD      = PARAM.msgCd  	    
	       )
	    WHEN MATCHED THEN
	    UPDATE
	    SET		  MSG_NM       = PARAM.msgNm	
			    , UPDATE_BY    = PARAM.updateBy
			    , UPDATE_DATE  = PARAM.updateDate
	       
	    WHEN NOT MATCHED THEN
		INSERT ( COMPANY_CD
			   , DIVISION_CD
			   , LANG_CD
			   , MSG_TYPE
			   , MSG_CD
			   , MSG_NM
			   , USE_YN
			   , DESCRIPTION
			   , CREATE_BY
			   , CREATE_DATE
			   , UPDATE_BY
			   , UPDATE_DATE
	    )   
	    VALUES ( PARAM.companyCd
			   , PARAM.divisionCd
			   , PARAM.langCd
			   , PARAM.msgType
               , PARAM.msgCd
			   , PARAM.msgNm
	           , PARAM.useYn
	           , PARAM.description
			   , PARAM.createBy
			   , PARAM.createDate
			   , PARAM.updateBy
			   , PARAM.updateDate
	    )	 
	</insert>
   
     
</mapper>
