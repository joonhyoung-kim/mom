<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUSM3040">
  <select id="get_pivotLang" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">
	  SELECT LISTAGG(''''||MC.CODE||'''', ',') WITHIN GROUP (ORDER BY MC.SORT_NO, MC.CODE) AS PIVOT_LANG
	  FROM   MOM_CODE MC
	  WHERE  MC.COMPANY_CD   = #{companyCd, jdbcType=VARCHAR} 
	  AND    MC.DIVISION_CD  = #{divisionCd, jdbcType=VARCHAR}
	  AND    MC.GROUP_CD     = #{groupCd, jdbcType=VARCHAR}
	  AND    MC.USE_YN = 'Y'
  </select>
  <select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">
	  SELECT  A.MSG_TYPE 
		    , MIN(A.MSG_TYPE_NM)  AS MSG_TYPE_NM
		    , A.MSG_CD
		    , A.MSG_CD AS KEY_ID 
		    , MIN(A.DESCRIPTION)  AS DESCRIPTION
		    , MIN(A.USE_YN)       AS USE_YN
		    , A.COMPANY_CD
		    , MIN(A.COMPANY_NM)   AS COMPANY_NM
		    , A.DIVISION_CD
		    , MIN(A.DIVISION_NM)  AS DIVISION_NM
		    , MIN(DECODE(A.LANG_CD, 'KR', A.MSG_NM, '')) AS MSG_NM_KR
		    , MIN(DECODE(A.LANG_CD, 'EN', A.MSG_NM, '')) AS MSG_NM_EN
		    , MIN(DECODE(A.LANG_CD, 'CN', A.MSG_NM, '')) AS MSG_NM_CN
      FROM  (SELECT MM.LANG_CD
                  , MM.MSG_TYPE
                  , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MM.COMPANY_CD,MM.DIVISION_CD,'SM0013', MM.MSG_TYPE, #{langCd, jdbcType=VARCHAR} )  FROM DUAL ) AS MSG_TYPE_NM
                  , MM.MSG_CD
                  , MM.MSG_NM
                  , CASE WHEN MM.MSG_TYPE = 'MENU' THEN
                        (SELECT MDM.DESCRIPTION 
                         FROM   MOM_DIVISION_MENU MDM 
                         WHERE  MDM.COMPANY_CD = MM.COMPANY_CD
                         AND    MDM.DIVISION_CD = MM.DIVISION_CD
                         AND    MDM.MENU_ID = MM.MSG_CD )
                    WHEN MM.MSG_TYPE = 'CODE' THEN
                        (SELECT MC.DESCRIPTION 
                         FROM   MOM_CODE MC 
                         WHERE  MC.COMPANY_CD  = MM.COMPANY_CD
                         AND    MC.DIVISION_CD = MM.DIVISION_CD
                         AND    MC.GROUP_CD||'_'||MC.CODE = MM.MSG_CD )
                    ELSE
                        MM.DESCRIPTION
                    END   AS DESCRIPTION
                  , MM.USE_YN
                  , MCD.COMPANY_CD
                  , MCD.COMPANY_NM
                  , MCD.DIVISION_CD
                  , MCD.DIVISION_NM
             FROM   MOM_COM_DIV_V MCD
                  , MOM_MESSAGE  MM  
             WHERE  MCD.COMPANY_CD   = MM.COMPANY_CD
             AND    MCD.DIVISION_CD  = MM.DIVISION_CD
             AND    MM.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
             AND    MM.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
             <if test="msgType != null and msgType != ''">
		     AND    MM.MSG_TYPE = #{msgType, jdbcType=VARCHAR}
		     </if> 
		     <if test="msgCd != null and msgCd != ''">
			 AND   (UPPER(MM.MSG_CD) LIKE '%' || UPPER(#{msgCd, jdbcType=VARCHAR}) || '%' )
			 </if> 
			 <if test="msgNm != null and msgNm != ''">
		     AND    MM.MSG_CD IN ( SELECT MMS.MSG_CD 
		                             FROM   MOM_MESSAGE MMS
		                             WHERE  MMS.COMPANY_CD  = MM.COMPANY_CD
		                             AND    MMS.DIVISION_CD = MMS.DIVISION_CD
		                             AND    TRIM(UPPER(MMS.MSG_NM)) LIKE '%' || TRIM(UPPER(#{msgNm, jdbcType=VARCHAR})) || '%' )
		        
			  </if> 
              ) A
			GROUP BY A.COMPANY_CD
			       , A.DIVISION_CD
			       , A.MSG_TYPE
			       , A.MSG_CD
			ORDER BY MSG_TYPE, MSG_CD  
   </select>
     <insert id="create_customBtn1-1-11" parameterType="java.util.List">
     <foreach collection="list" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
       INTO MOM_MESSAGE (
                  COMPANY_CD
                , DIVISION_CD
                , LANG_CD
                , MSG_TYPE
                , MSG_CD
                , MSG_NM
                , USE_YN
                , DESCRIPTION
                , CREATE_BY
                , CREATE_DATE
                , UPDATE_BY
                , UPDATE_DATE )

       VALUES
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.langCd2, jdbcType=VARCHAR}
                , #{item.msgType, jdbcType=VARCHAR}
                , #{item.msgCd, jdbcType=VARCHAR}
                , #{item.msgNm, jdbcType=VARCHAR}
                , NVL(#{item.useYn, jdbcType=VARCHAR},'Y')
                , NVL(#{item.description, jdbcType=VARCHAR},'')
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
    </foreach>
  </insert>
     <insert id="create_customBtn1-3-31" parameterType="java.util.List">
     <foreach collection="list" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
       INTO MOM_MESSAGE (
                  COMPANY_CD
                , DIVISION_CD
                , LANG_CD
                , MSG_TYPE
                , MSG_CD
                , MSG_NM
                , USE_YN
                , DESCRIPTION
                , CREATE_BY
                , CREATE_DATE
                , UPDATE_BY
                , UPDATE_DATE )

       VALUES
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.langCd2, jdbcType=VARCHAR}
                , #{item.msgType, jdbcType=VARCHAR}
                , #{item.msgCd, jdbcType=VARCHAR}
                , #{item.msgNm, jdbcType=VARCHAR}
                , NVL(#{item.useYn, jdbcType=VARCHAR},'Y')
                , NVL(#{item.description, jdbcType=VARCHAR},'')
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
    </foreach>
  </insert>
    <update id="modify_customBtn1-2-21" parameterType="java.util.List">
    <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
      UPDATE MOM_MESSAGE
      SET    COMPANY_CD = #{item.companyCd, jdbcType=VARCHAR}
           , DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           , LANG_CD = #{item.langCd2, jdbcType=VARCHAR}
           , MSG_TYPE = #{item.msgType, jdbcType=VARCHAR}
           , MSG_CD = #{item.msgCd, jdbcType=VARCHAR}
           , MSG_NM = #{item.msgNm, jdbcType=VARCHAR}
           , USE_YN = NVL(#{item.useYn, jdbcType=VARCHAR},'Y')
           , DESCRIPTION = NVL(#{item.description, jdbcType=VARCHAR},'')
           , UPDATE_BY = #{item.userId, jdbcType=VARCHAR}
           , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
      WHERE  1=1
      AND    COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
      AND    DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
      AND    LANG_CD     = #{item.langCd2, jdbcType=VARCHAR}
      AND    MSG_CD      = #{item.msgCd, jdbcType=VARCHAR}
    </foreach>
  </update>
   <insert id="create_createBtn1" parameterType="java.util.List">
     <foreach collection="list" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
       INTO MOM_MESSAGE (
                  COMPANY_CD
                , DIVISION_CD
                , LANG_CD
                , MSG_TYPE
                , MSG_CD
                , MSG_NM
                , USE_YN
                , DESCRIPTION
                , CREATE_BY
                , CREATE_DATE
                , UPDATE_BY
                , UPDATE_DATE )

       VALUES
              (   #{item.companyCd, jdbcType=VARCHAR}
                , #{item.divisionCd, jdbcType=VARCHAR}
                , #{item.langCd2, jdbcType=VARCHAR}
                , #{item.msgType, jdbcType=VARCHAR}
                , #{item.msgCd, jdbcType=VARCHAR}
                , #{item.msgNm, jdbcType=VARCHAR}
                , NVL(#{item.useYn, jdbcType=VARCHAR},'Y')
                , NVL(#{item.description, jdbcType=VARCHAR},'')
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                , #{item.userId, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
              )
    </foreach>
  </insert>
  <update id="modify_editBtn1" parameterType="java.util.List">
    <foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close=";END;">
      UPDATE MOM_MESSAGE
      SET    COMPANY_CD = #{item.companyCd, jdbcType=VARCHAR}
           , DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           , LANG_CD = #{item.langCd2, jdbcType=VARCHAR}
           , MSG_TYPE = #{item.msgType, jdbcType=VARCHAR}
           , MSG_CD = #{item.msgCd, jdbcType=VARCHAR}
           , MSG_NM = #{item.msgNm, jdbcType=VARCHAR}
           , USE_YN = NVL(#{item.useYn, jdbcType=VARCHAR},'Y')
           , DESCRIPTION = NVL(#{item.description, jdbcType=VARCHAR},'')
           , UPDATE_BY = #{item.userId, jdbcType=VARCHAR}
           , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
      WHERE  1=1
      AND    COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
      AND    DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
      AND    LANG_CD     = #{item.langCd2, jdbcType=VARCHAR}
      AND    MSG_CD      = #{item.msgCd, jdbcType=VARCHAR}
    </foreach>
  </update>
  <delete id="remove_delBtn1" parameterType="java.util.List">
      DELETE FROM MOM_MESSAGE
      <where>
       <foreach collection="list" item="item" open="" close="" separator="OR">
        (       COMPANY_CD = #{item.companyCd, jdbcType=VARCHAR}
           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           AND  MSG_CD = #{item.msgCd, jdbcType=VARCHAR}
        )
       </foreach>
      </where>
  </delete>  
    <insert id="upsert_customBtn11-1" parameterType="java.util.HashMap" flushCache="true">
    MERGE INTO MOM_MESSAGE 
        USING( SELECT #{companyCd, jdbcType=VARCHAR} as companyCd,
                      #{divisionCd, jdbcType=VARCHAR} as divisionCd,
                      #{itemId, jdbcType=VARCHAR} as itemId,
                      #{itemNm, jdbcType=VARCHAR} as itemNm,
                      #{itemGroupCd, jdbcType=VARCHAR} as itemGroupCd,
                      #{itemType, jdbcType=VARCHAR} as itemType,
                      #{itemSpec, jdbcType=VARCHAR} as itemSpec,
                      #{unit, jdbcType=VARCHAR} as unit,
                      #{purchaseUnit, jdbcType=VARCHAR} as purchaseUnit,
                      #{procurementType, jdbcType=VARCHAR} as procurementType,
                      #{materialType, jdbcType=VARCHAR} as materialType,
                      #{netWeight, jdbcType=NUMERIC} as netWeight,
                      #{netWeightUnit, jdbcType=VARCHAR} as netWeightUnit,
                      #{grossWeight, jdbcType=NUMERIC} as grossWeight,
                      #{grossWeightUnit, jdbcType=VARCHAR} as grossWeightUnit,
                      #{inLocationCd, jdbcType=VARCHAR} as inLocationCd,
                      #{outLocationCd, jdbcType=VARCHAR} as outLocationCd,
                      #{issueType, jdbcType=VARCHAR} as issueType,
                      #{issueUnit, jdbcType=VARCHAR} as issueUnit,
                      #{vendorCd, jdbcType=VARCHAR} as vendorCd,
                      #{departureVendorCd, jdbcType=VARCHAR} as departureVendorCd,
                      #{testReportFlag, jdbcType=VARCHAR} as testReportFlag,
                      #{iqcFlag, jdbcType=VARCHAR} as iqcFlag,
                      #{pqcFlag, jdbcType=VARCHAR} as pqcFlag,
                      #{fqcFlag, jdbcType=VARCHAR} as fqcFlag,
                      #{oqcFlag, jdbcType=VARCHAR} as oqcFlag,
                      #{rpItemId, jdbcType=VARCHAR} as rpItemId,
                      #{itemCategoryL, jdbcType=VARCHAR} as itemCategoryL,
                      #{itemCategoryM, jdbcType=VARCHAR} as itemCategoryM,
                      #{itemCategoryS, jdbcType=VARCHAR} as itemCategoryS,
                      #{exceptionIssueFlag, jdbcType=VARCHAR} as exceptionIssueFlag,
                      #{color, jdbcType=VARCHAR} as color,
                      #{customerDivisionCd, jdbcType=VARCHAR} as customerDivisionCd,
                      #{maker, jdbcType=VARCHAR} as maker,
                      #{abcType, jdbcType=VARCHAR} as abcType,
                      #{drawingNo, jdbcType=VARCHAR} as drawingNo,
                      #{hsCd, jdbcType=VARCHAR} as hsCd,
                      #{reorderPoint, jdbcType=NUMERIC} as reorderPoint,
                      #{safetyStockQty, jdbcType=NUMERIC} as safetyStockQty,
                      #{phantomFlag, jdbcType=VARCHAR} as phantomFlag,
                      #{mrpFlag, jdbcType=VARCHAR} as mrpFlag,
                      #{useYn, jdbcType=VARCHAR} as useYn,
                      #{description, jdbcType=VARCHAR} as description,
                      #{userId, jdbcType=VARCHAR} as createBy,
                      MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as createDate,
                      #{userId, jdbcType=VARCHAR} as updateBy,
                      MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{companyCd, jdbcType=VARCHAR},#{divisionCd, jdbcType=VARCHAR}) as updateDate
               FROM DUAL
               ) PARAM
        ON ( COMPANY_CD = PARAM.companyCd AND
             DIVISION_CD = PARAM.divisionCd AND
             ITEM_ID = PARAM.itemId )
        WHEN MATCHED THEN 
            UPDATE SET 
             LANG_CD  = PARAM.langCd
           , MSG_TYPE = PARAM.msgType
           , MSG_CD   = PARAM.msgCd
           , MSG_NM   = PARAM.msgNm
           , USE_YN   = PARAM.useYn
           , DESCRIPTION = PARAM.description
           , UPDATE_BY   = PARAM.updateBy
           , UPDATE_DATE = PARAM.updateDate
            
            
            ITEM_NM = PARAM.itemNm
                     , ITEM_GROUP_CD = PARAM.itemGroupCd
                     , ITEM_TYPE = PARAM.itemType
                     , ITEM_SPEC = PARAM.itemSpec
                     , UNIT = PARAM.unit
                     , PURCHASE_UNIT = PARAM.purchaseUnit
                     , PROCUREMENT_TYPE = PARAM.procurementType
                     , MATERIAL_TYPE = PARAM.materialType
                     , NET_WEIGHT = PARAM.netWeight
                     , NET_WEIGHT_UNIT = PARAM.netWeightUnit
                     , GROSS_WEIGHT = PARAM.grossWeight
                     , GROSS_WEIGHT_UNIT = PARAM.grossWeightUnit
                     , IN_LOCATION_CD = PARAM.inLocationCd
                     , OUT_LOCATION_CD = PARAM.outLocationCd
                     , ISSUE_TYPE = PARAM.issueType
                     , ISSUE_UNIT = PARAM.issueUnit
                     , VENDOR_CD = PARAM.vendorCd
                     , DEPARTURE_VENDOR_CD = PARAM.departureVendorCd
                     , TEST_REPORT_FLAG = PARAM.testReportFlag
                     , IQC_FLAG = PARAM.iqcFlag
                     , PQC_FLAG = PARAM.pqcFlag
                     , FQC_FLAG = PARAM.fqcFlag
                     , OQC_FLAG = PARAM.oqcFlag
                     , RP_ITEM_ID = PARAM.rpItemId
                     , ITEM_CATEGORY_L = PARAM.itemCategoryL
                     , ITEM_CATEGORY_M = PARAM.itemCategoryM
                     , ITEM_CATEGORY_S = PARAM.itemCategoryS
                     , EXCEPTION_ISSUE_FLAG = PARAM.exceptionIssueFlag
                     , COLOR = PARAM.color
                     , CUSTOMER_DIVISION_CD = PARAM.customerDivisionCd
                     , MAKER = PARAM.maker
                     , ABC_TYPE = PARAM.abcType
                     , DRAWING_NO = PARAM.drawingNo
                     , HS_CD = PARAM.hsCd
                     , REORDER_POINT = PARAM.reorderPoint
                     , SAFETY_STOCK_QTY = PARAM.safetyStockQty
                     , PHANTOM_FLAG = PARAM.phantomFlag
                     , MRP_FLAG = PARAM.mrpFlag
                     , USE_YN = PARAM.useYn
                     , DESCRIPTION = PARAM.description
                     , CREATE_BY = PARAM.createBy
                     , CREATE_DATE = PARAM.createDate
                     , UPDATE_BY = PARAM.updateBy
                     , UPDATE_DATE = PARAM.updateDate
        WHEN NOT MATCHED THEN
            INSERT( COMPANY_CD
                  , DIVISION_CD
                  , ITEM_ID
                  , ITEM_NM
                  , ITEM_GROUP_CD
                  , ITEM_TYPE
                  , ITEM_SPEC
                  , UNIT
                  , PURCHASE_UNIT
                  , PROCUREMENT_TYPE
                  , MATERIAL_TYPE
                  , NET_WEIGHT
                  , NET_WEIGHT_UNIT
                  , GROSS_WEIGHT
                  , GROSS_WEIGHT_UNIT
                  , IN_LOCATION_CD
                  , OUT_LOCATION_CD
                  , ISSUE_TYPE
                  , ISSUE_UNIT
                  , VENDOR_CD
                  , DEPARTURE_VENDOR_CD
                  , TEST_REPORT_FLAG
                  , IQC_FLAG
                  , PQC_FLAG
                  , FQC_FLAG
                  , OQC_FLAG
                  , RP_ITEM_ID
                  , ITEM_CATEGORY_L
                  , ITEM_CATEGORY_M
                  , ITEM_CATEGORY_S
                  , EXCEPTION_ISSUE_FLAG
                  , COLOR
                  , CUSTOMER_DIVISION_CD
                  , MAKER
                  , ABC_TYPE
                  , DRAWING_NO
                  , HS_CD
                  , REORDER_POINT
                  , SAFETY_STOCK_QTY
                  , PHANTOM_FLAG
                  , MRP_FLAG
                  , USE_YN
                  , DESCRIPTION
                  , CREATE_BY
                  , CREATE_DATE
                  , UPDATE_BY
                  , UPDATE_DATE )
           VALUES ( PARAM.companyCd
                  , PARAM.divisionCd
                  , PARAM.itemId
                  , PARAM.itemNm
                  , PARAM.itemGroupCd
                  , PARAM.itemType
                  , PARAM.itemSpec
                  , PARAM.unit
                  , PARAM.purchaseUnit
                  , PARAM.procurementType
                  , PARAM.materialType
                  , PARAM.netWeight
                  , PARAM.netWeightUnit
                  , PARAM.grossWeight
                  , PARAM.grossWeightUnit
                  , PARAM.inLocationCd
                  , PARAM.outLocationCd
                  , PARAM.issueType
                  , PARAM.issueUnit
                  , PARAM.vendorCd
                  , PARAM.departureVendorCd
                  , PARAM.testReportFlag
                  , PARAM.iqcFlag
                  , PARAM.pqcFlag
                  , PARAM.fqcFlag
                  , PARAM.oqcFlag
                  , PARAM.rpItemId
                  , PARAM.itemCategoryL
                  , PARAM.itemCategoryM
                  , PARAM.itemCategoryS
                  , PARAM.exceptionIssueFlag
                  , PARAM.color
                  , PARAM.customerDivisionCd
                  , PARAM.maker
                  , PARAM.abcType
                  , PARAM.drawingNo
                  , PARAM.hsCd
                  , PARAM.reorderPoint
                  , PARAM.safetyStockQty
                  , PARAM.phantomFlag
                  , PARAM.mrpFlag
                  , PARAM.useYn
                  , PARAM.description
                  , PARAM.createBy
                  , PARAM.createDate
                  , PARAM.updateBy
                  , PARAM.updateDate )
    </insert>
</mapper>
